// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: –¢–µ–ø–ª–æ–≤—ã–µ —è–≤–ª–µ–Ω–∏—è
class ThermalExperiment {
    constructor() {
        this.canvas = document.getElementById('thermalCanvas');
        if (!this.canvas) return;
        
        this.ctx = this.canvas.getContext('2d');
        this.temperature = 20; // –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ¬∞C
        this.power = 500; // –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä–µ–≤–∞ –≤ –í—Ç
        this.time = 0; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        this.isHeating = false;
        this.animationId = null;
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—ã
        this.mass = 0.5; // –∫–≥
        this.specificHeat = 4200; // –î–∂/(–∫–≥¬∑¬∞C)
        
        this.init();
    }

    init() {
        this.setupEvents();
        this.draw();
    }

    setupEvents() {
        // –°–ª–∞–π–¥–µ—Ä –º–æ—â–Ω–æ—Å—Ç–∏
        const powerSlider = document.getElementById('powerSlider');
        const powerValue = document.getElementById('powerValue');
        
        if (powerSlider) {
            powerSlider.addEventListener('input', (e) => {
                this.power = parseInt(e.target.value);
                powerValue.textContent = this.power + ' –í—Ç';
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–≥—Ä–µ–≤–∞
        const startBtn = document.getElementById('startHeating');
        if (startBtn) {
            startBtn.addEventListener('click', () => this.startHeating());
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        const stopBtn = document.getElementById('stopHeating');
        if (stopBtn) {
            stopBtn.addEventListener('click', () => this.stopHeating());
        }
    }

    startHeating() {
        if (this.isHeating) return;
        
        this.isHeating = true;
        this.lastTime = Date.now();
        this.animate();
    }

    stopHeating() {
        this.isHeating = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
    }

    animate() {
        if (!this.isHeating) return;

        const now = Date.now();
        const deltaTime = (now - this.lastTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        this.lastTime = now;

        // –†–∞—Å—á—ë—Ç –Ω–∞–≥—Ä–µ–≤–∞: Q = m * c * ŒîT
        // ŒîT = Q / (m * c) = P * t / (m * c)
        const energyAdded = this.power * deltaTime;
        const tempIncrease = energyAdded / (this.mass * this.specificHeat);
        
        this.temperature += tempIncrease;
        this.time += deltaTime;

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if (this.temperature >= 100) {
            this.temperature = 100;
            this.stopHeating();
            alert('–í–æ–¥–∞ –∑–∞–∫–∏–ø–µ–ª–∞! üíßüí®');
        }

        this.updateDisplay();
        this.draw();

        this.animationId = requestAnimationFrame(() => this.animate());
    }

    updateDisplay() {
        document.getElementById('temperature').textContent = this.temperature.toFixed(1) + '¬∞C';
        document.getElementById('heatingTime').textContent = this.time.toFixed(1) + ' —Å';
    }

    draw() {
        const ctx = this.ctx;
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        // –§–æ–Ω
        ctx.fillStyle = '#f0f4f8';
        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctx.fillStyle = '#667eea';
        ctx.font = 'bold 24px Arial';
        ctx.fillText('–ù–∞–≥—Ä–µ–≤–∞–Ω–∏–µ –≤–æ–¥—ã', 50, 50);

        const centerX = this.canvas.width / 2;
        const centerY = this.canvas.height / 2;

        // –ì–æ—Ä–µ–ª–∫–∞
        this.drawBurner(centerX, centerY + 200);

        // –ö–æ–ª–±–∞ —Å –≤–æ–¥–æ–π
        this.drawFlask(centerX, centerY);

        // –¢–µ—Ä–º–æ–º–µ—Ç—Ä
        this.drawThermometer(centerX + 250, centerY);

        // –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        this.drawGraph(centerX - 350, centerY - 150);

        // –ú–æ–ª–µ–∫—É–ª—ã (–∞–Ω–∏–º–∞—Ü–∏—è)
        if (this.isHeating) {
            this.drawMolecules(centerX, centerY);
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        ctx.fillStyle = '#333';
        ctx.font = '18px Arial';
        ctx.fillText(`–ú–∞—Å—Å–∞ –≤–æ–¥—ã: ${this.mass} –∫–≥`, 50, 100);
        ctx.fillText(`–£–¥–µ–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ—ë–º–∫–æ—Å—Ç—å: ${this.specificHeat} –î–∂/(–∫–≥¬∑¬∞C)`, 50, 130);
        ctx.fillText(`–ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä–µ–≤–∞: ${this.power} –í—Ç`, 50, 160);
    }

    drawBurner(x, y) {
        const ctx = this.ctx;
        
        // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–µ–ª–∫–∏
        ctx.fillStyle = '#616161';
        ctx.fillRect(x - 60, y, 120, 30);
        
        // –ü–ª–∞–º—è
        if (this.isHeating) {
            const flameHeight = 80 + Math.random() * 20;
            const gradient = ctx.createLinearGradient(x, y - flameHeight, x, y);
            gradient.addColorStop(0, '#FFF59D');
            gradient.addColorStop(0.3, '#FFB74D');
            gradient.addColorStop(0.7, '#FF5722');
            gradient.addColorStop(1, '#D32F2F');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.bezierCurveTo(
                x - 40, y - flameHeight / 2,
                x - 30, y - flameHeight,
                x, y - flameHeight
            );
            ctx.bezierCurveTo(
                x + 30, y - flameHeight,
                x + 40, y - flameHeight / 2,
                x, y
            );
            ctx.fill();

            // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å –ø–ª–∞–º–µ–Ω–∏
            ctx.fillStyle = 'rgba(255, 255, 200, 0.8)';
            ctx.beginPath();
            ctx.ellipse(x, y - 30, 15, 25, 0, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    drawFlask(x, y) {
        const ctx = this.ctx;
        
        // –ì–æ—Ä–ª—ã—à–∫–æ –∫–æ–ª–±—ã
        ctx.fillStyle = 'rgba(200, 230, 255, 0.3)';
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 3;
        ctx.fillRect(x - 20, y - 180, 40, 40);
        ctx.strokeRect(x - 20, y - 180, 40, 40);
        
        // –¢–µ–ª–æ –∫–æ–ª–±—ã
        ctx.beginPath();
        ctx.arc(x, y - 50, 100, 0, Math.PI * 2);
        ctx.fillStyle = 'rgba(200, 230, 255, 0.3)';
        ctx.fill();
        ctx.stroke();

        // –í–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏
        const waterLevel = (this.temperature - 20) / 80; // 0 to 1
        const waterColor = this.getWaterColor();
        
        ctx.fillStyle = waterColor;
        ctx.beginPath();
        ctx.arc(x, y - 50, 90, 0, Math.PI * 2);
        ctx.fill();

        // –ü—É–∑—ã—Ä—å–∫–∏ –ø—Ä–∏ –∫–∏–ø–µ–Ω–∏–∏
        if (this.temperature > 90) {
            this.drawBubbles(x, y - 50);
        }
    }

    getWaterColor() {
        // –¶–≤–µ—Ç –≤–æ–¥—ã –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–≤–∞—Ç–æ–º—É –ø—Ä–∏ –Ω–∞–≥—Ä–µ–≤–µ
        const ratio = Math.min(this.temperature / 100, 1);
        const r = Math.floor(100 + ratio * 155);
        const g = Math.floor(200 - ratio * 50);
        const b = Math.floor(255 - ratio * 100);
        return `rgba(${r}, ${g}, ${b}, 0.7)`;
    }

    drawBubbles(x, y) {
        const ctx = this.ctx;
        const numBubbles = Math.floor(this.temperature - 85);
        
        for (let i = 0; i < numBubbles; i++) {
            const bubbleX = x + (Math.random() - 0.5) * 160;
            const bubbleY = y + (Math.random() - 0.5) * 160;
            const radius = Math.random() * 5 + 2;
            
            ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
            ctx.beginPath();
            ctx.arc(bubbleX, bubbleY, radius, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    drawMolecules(x, y) {
        const ctx = this.ctx;
        const speed = this.temperature / 20; // —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –º–æ–ª–µ–∫—É–ª
        
        for (let i = 0; i < 20; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = Math.random() * 80;
            const moleculeX = x + Math.cos(angle + Date.now() / 1000 * speed) * distance;
            const moleculeY = y - 50 + Math.sin(angle + Date.now() / 1000 * speed) * distance;
            
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.beginPath();
            ctx.arc(moleculeX, moleculeY, 3, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    drawThermometer(x, y) {
        const ctx = this.ctx;
        
        // –ö–æ—Ä–ø—É—Å —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞
        ctx.fillStyle = '#E0E0E0';
        ctx.fillRect(x - 15, y - 150, 30, 200);
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 2;
        ctx.strokeRect(x - 15, y - 150, 30, 200);
        
        // –ö–æ–ª–±–∞ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞
        ctx.fillStyle = '#BDBDBD';
        ctx.beginPath();
        ctx.arc(x, y + 60, 20, 0, Math.PI * 2);
        ctx.fill();
        ctx.stroke();
        
        // –†—Ç—É—Ç—å/—Å–ø–∏—Ä—Ç
        const mercuryHeight = (this.temperature / 100) * 180;
        const mercuryColor = this.temperature > 80 ? '#F44336' : '#2196F3';
        
        ctx.fillStyle = mercuryColor;
        ctx.fillRect(x - 8, y + 50 - mercuryHeight, 16, mercuryHeight);
        
        ctx.beginPath();
        ctx.arc(x, y + 60, 15, 0, Math.PI * 2);
        ctx.fill();
        
        // –®–∫–∞–ª–∞
        ctx.fillStyle = '#333';
        ctx.font = '12px Arial';
        ctx.textAlign = 'right';
        
        for (let temp = 0; temp <= 100; temp += 20) {
            const markY = y + 50 - (temp / 100) * 180;
            ctx.beginPath();
            ctx.moveTo(x + 15, markY);
            ctx.lineTo(x + 25, markY);
            ctx.stroke();
            ctx.fillText(temp + '¬∞C', x + 55, markY + 5);
        }
        
        ctx.textAlign = 'left';
    }

    drawGraph(x, y) {
        const ctx = this.ctx;
        
        // –†–∞–º–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, 250, 200);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctx.fillStyle = '#667eea';
        ctx.font = 'bold 16px Arial';
        ctx.fillText('–ì—Ä–∞—Ñ–∏–∫ –Ω–∞–≥—Ä–µ–≤–∞', x + 50, y - 10);
        
        // –û—Å–∏
        ctx.strokeStyle = '#666';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(x + 30, y + 170);
        ctx.lineTo(x + 230, y + 170);
        ctx.stroke();
        
        ctx.beginPath();
        ctx.moveTo(x + 30, y + 170);
        ctx.lineTo(x + 30, y + 20);
        ctx.stroke();
        
        // –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        ctx.fillStyle = '#333';
        ctx.font = '12px Arial';
        ctx.fillText('–í—Ä–µ–º—è (—Å)', x + 100, y + 195);
        ctx.save();
        ctx.translate(x + 10, y + 100);
        ctx.rotate(-Math.PI / 2);
        ctx.fillText('T (¬∞C)', 0, 0);
        ctx.restore();
        
        // –ì—Ä–∞—Ñ–∏–∫ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä—è–º–∞—è)
        if (this.time > 0) {
            ctx.strokeStyle = '#FF5722';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(x + 30, y + 170 - (20 - 20) * 1.5);
            
            const endX = x + 30 + Math.min(this.time * 3, 200);
            const endY = y + 170 - (this.temperature - 20) * 1.5;
            ctx.lineTo(endX, endY);
            ctx.stroke();
        }
    }

    reset() {
        this.stopHeating();
        this.temperature = 20;
        this.time = 0;
        this.power = 500;
        document.getElementById('powerSlider').value = 500;
        document.getElementById('powerValue').textContent = '500 –í—Ç';
        this.updateDisplay();
        this.draw();
    }
}
