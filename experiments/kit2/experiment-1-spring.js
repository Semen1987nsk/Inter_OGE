/**
 * Experiment 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –ø—Ä—É–∂–∏–Ω—ã
 * Interactive Spring Stiffness Measurement
 */

import { FreeformManager } from '../shared/freeform-manager.js';

class SpringExperiment {
    constructor() {
        // Canvas layers (IDs must match HTML)
        this.canvases = {
            background: document.getElementById('canvas-background'),
            equipment: document.getElementById('canvas-equipment'),
            dynamic: document.getElementById('canvas-dynamic'),
            particles: document.getElementById('canvas-particles'),
            ui: document.getElementById('canvas-ui')
        };
        
        this.contexts = {};
        Object.keys(this.canvases).forEach(key => {
            const canvas = this.canvases[key];
            if (!canvas) {
                console.error(`Canvas element missing: ${key}`);
            } else {
                this.contexts[key] = canvas.getContext('2d');
            }
        });

        // State
        this.state = {
            currentStep: 1,
            experimentMode: 'spring', // –¢–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä—É–∂–∏–Ω–æ–π
            isAnimating: false,
            isDragging: false,
            draggingSpring: false,
            springAttached: false,
            attachedSpringId: null,
            dynamometerAttached: false, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            attachedDynamometerId: null,
            dynamometerPosition: { x: 450, y: 200 },
            weightAttached: false,
            currentWeight: null,
            currentWeightId: null,
            springPosition: { x: 200, y: 150 },
            springLength: 140,
            springNaturalLength: 140,
            springElongation: 0,
            measurements: [], // –ï–¥–∏–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            attachedWeights: [],
            selectedWeights: new Set(),
            experimentComplete: false,
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–µ
            dynamometerCheckMode: false, // –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–ª—ã –Ω–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–µ
            lastDynamometerReading: null, // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞
            // üÜï –°–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã –Ω–∞ —Å—Ç–æ–ª–µ
            freeWeights: [], // –ì—Ä—É–∑—ã, —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã–µ –Ω–∞ canvas, –Ω–æ –Ω–µ –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã–µ
            // üÜï –£—á—ë—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            usedWeightIds: new Set() // ID –≥—Ä—É–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã (–ø–æ–¥–≤–µ—à–µ–Ω—ã –∏–ª–∏ –Ω–∞ canvas)
        };

        this.springDragged = false;
        this.pendingWeightIds = new Set();

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω—à–µ—Ç–∞ —Å –ø—Ä—É–∂–∏–Ω–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
        this.layout = {
            springRig: {
                position: { x: 260, y: 80 },
                width: 260,
                height: 420,
                anchorRatio: { x: 0.48, y: 0.18 }, // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä—é—á–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
                anchorOffset: { x: 0, y: 0 }
            }
        };

        this.updateRigGeometry();

        // Physics constants
        this.physics = {
            springConstant: 50, // N/m (–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤)
            gravity: 9.8, // m/s¬≤
            pixelsPerCm: 40, // –º–∞—Å—à—Ç–∞–±: 40px = 1cm
            oscillationAmplitude: 0,
            oscillationTime: 0,
            isDamping: false
        };

        // Images
        this.images = {
            springBoard: null,
            weights: {}
        };

        // Systems
        this.particleSystem = new ParticleSystem(this.canvases.particles);
        this.realisticRenderer = new RealisticRenderer(this.contexts.dynamic);
        
        // Pointer tracking for dynamic highlight
        this.pointer = { x: 0, y: 0, over: false };
        
        // Kinematics for motion blur
        this.prevSpringLength = null;
        this.springVelocity = 0;
        this.currentAnimation = null;
        this.attachmentManager = new AttachmentManager(this);
        
        // Spring offset for dragging
        this.springOffset = { x: 0, y: 0 };
        this.reinitDragSources = null;
        this.dragGhost = null; // –ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –∫–æ–ø–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏

        // Visual scaling to keep soft –ø—Ä—É–∂–∏–Ω—ã –≤ –∫–∞–¥—Ä–µ
        this.visual = {
            scale: 1,
            minScale: 0.2,
            marginTop: 120,
            marginBottom: 140
        };

        // UI references
        this.ui = {
            equipmentContainer: document.getElementById('equipment-container'),
            weightsContainer: document.getElementById('weights-container')
        };

        // Visual configuration toggles
        this.visualSettings = {
            measurementParticles: false,
            completionConfetti: true
        };

        // Inventory metadata
        this.equipment = {
            dynamometer1: {
                id: 'dynamometer1',
                name: '–î–∏–Ω–∞–º–æ–º–µ—Ç—Ä 1–ù',
                maxForce: 1,
                icon: '‚öñÔ∏è',
                type: 'dynamometer',
                description: '–î–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–∞–ª—ã—Ö —Å–∏–ª',
                scale: 0.1 // –¶–µ–Ω–∞ –¥–µ–ª–µ–Ω–∏—è 0.1 –ù
            },
            dynamometer5: {
                id: 'dynamometer5',
                name: '–î–∏–Ω–∞–º–æ–º–µ—Ç—Ä 5–ù',
                maxForce: 5,
                icon: '‚öñÔ∏è',
                type: 'dynamometer',
                description: '–î–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å–∏–ª',
                scale: 0.5 // –¶–µ–Ω–∞ –¥–µ–ª–µ–Ω–∏—è 0.5 –ù
            },
            spring50: {
                id: 'spring50',
                name: '–ü—Ä—É–∂–∏–Ω–∞ ‚Ññ1',
                stiffness: '50 –ù/–º',
                stiffnessValue: 50,
                icon: 'üåÄ',
                type: 'spring',
                naturalLength: 140
            },
            spring10: {
                id: 'spring10',
                name: '–ü—Ä—É–∂–∏–Ω–∞ ‚Ññ2',
                stiffness: '10 –ù/–º',
                stiffnessValue: 10,
                icon: 'üß∑',
                type: 'spring',
                naturalLength: 140
            }
        };

        // –ù–∞–±–æ—Ä –≥—Ä—É–∑–æ–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞ ‚Ññ2 (–§–ò–ü–ò –û–ì–≠ 2025)
        this.weightsInventory = [
            {
                id: 'weight100_double_1',
                mass: 100,
                name: '–ì—Ä—É–∑ 100 –≥ ‚Ññ1',
                description: '–î–≤–æ–π–Ω–æ–π –∫—Ä—é–∫ –¥–ª—è —Å—Ç—ã–∫–æ–≤–∫–∏',
                icon: '../../assets/equipment/weight-100g-double-hook.svg',
                hooksTop: true,
                hooksBottom: true,
                targetSize: 88,
                hookGap: 28
            },
            {
                id: 'weight100_double_2',
                mass: 100,
                name: '–ì—Ä—É–∑ 100 –≥ ‚Ññ2',
                description: '–î–≤–æ–π–Ω–æ–π –∫—Ä—é–∫ –¥–ª—è —Å—Ç—ã–∫–æ–≤–∫–∏',
                icon: '../../assets/equipment/weight-100g-double-hook.svg',
                hooksTop: true,
                hooksBottom: true,
                targetSize: 88,
                hookGap: 28
            },
            {
                id: 'weight100_double_3',
                mass: 100,
                name: '–ì—Ä—É–∑ 100 –≥ ‚Ññ3',
                description: '–î–≤–æ–π–Ω–æ–π –∫—Ä—é–∫ –¥–ª—è —Å—Ç—ã–∫–æ–≤–∫–∏',
                icon: '../../assets/equipment/weight-100g-double-hook.svg',
                hooksTop: true,
                hooksBottom: true,
                targetSize: 88,
                hookGap: 28
            },
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –∑–∞–∫–∞–∑—á–∏–∫–∞
        ];

        // Cache for tracking last pointer position during canvas drag
        this.lastPointer = { x: 0, y: 0 };

        this.defaults = {
            springNaturalLength: this.state.springNaturalLength,
            springConstant: this.physics.springConstant
        };
        
        // Init (setupInteractions moved to init to ensure DOM ready)
        this.init();
    }

    get springPosition() {
        return this.state.springPosition;
    }

    async init() {
        try {
            // Resize canvases
            this.resizeCanvases();
            window.addEventListener('resize', () => this.resizeCanvases());

            // Load images
            await this.loadAssets();

            // Render side panel inventory
            this.renderEquipmentInventory();
            this.renderWeightsInventory();

            // Draw static elements
            this.drawBackground();
            this.drawEquipment();

            // Setup UI
            this.setupEventListeners();

            // Setup interactions AFTER DOM elements exist
            this.setupInteractions();
            console.log('‚úÖ Interactions setup complete');

            // –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫–æ–Ω—Ü–∞ –ø—Ä—É–∂–∏–Ω—ã)
            this.setupEquipmentDragListeners();
            
            // üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            this.setupFreeWeightsDrag();
            
            this.handleStepChange();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
            this.renderMeasurementsTable();
            this.updateRecordButton();
            this.updateCalculateButton();

            // Hide loading overlay
            this.hideLoading();

            // Start render loop
            this.lastTime = performance.now();
            this.animate();

            console.log('‚úÖ Experiment initialized successfully');
        } catch (error) {
            console.error('‚ùå Initialization error:', error);
            this.hideLoading();
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: ' + error.message);
        }
    }

    hideLoading() {
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.style.opacity = '0';
            setTimeout(() => {
                loadingOverlay.style.display = 'none';
            }, 300);
        }
    }

    updateRigGeometry() {
        const rig = this.layout.springRig;
        rig.anchorOffset = {
            x: rig.width * rig.anchorRatio.x,
            y: rig.height * rig.anchorRatio.y
        };
    }

    async loadAssets() {
        console.log('üì¶ Preparing virtual spring rig...');

        const rig = this.layout.springRig;

        if (!rig.height) {
            rig.height = Math.round(rig.width * 1.62);
        }

        this.updateRigGeometry();

        if (!this.springDragged) {
            this.state.springPosition = {
                x: rig.position.x + rig.anchorOffset.x,
                y: rig.position.y + rig.anchorOffset.y
            };
        } else {
            this.updateRigPositionFromSpring();
        }

        console.log('‚úÖ Virtual board prepared:', rig.width, 'x', rig.height);

        await this.loadWeightAssets();
    }

    updateRigPositionFromSpring() {
        this.clampSpringPosition();
        const rig = this.layout.springRig;
        rig.position.x = this.state.springPosition.x - rig.anchorOffset.x;
        rig.position.y = this.state.springPosition.y - rig.anchorOffset.y;
    }

    getSpringAnchor() {
        return {
            x: this.state.springPosition.x,
            y: this.state.springPosition.y
        };
    }

    getEquipmentById(id) {
        if (!id) return null;
        return Object.values(this.equipment).find(item => item.id === id) || null;
    }

    getAttachedSpring() {
        return this.getEquipmentById(this.state.attachedSpringId);
    }

    getWeightById(id) {
        if (!id || !Array.isArray(this.weightsInventory)) {
            return null;
        }

        return this.weightsInventory.find(weight => weight.id === id) || null;
    }

    canAttachWeight(weight) {
        if (!weight) {
            return false;
        }

        if (!this.state.attachedWeights?.length) {
            return !!weight.hooksTop;
        }

        const last = this.state.attachedWeights[this.state.attachedWeights.length - 1];
        const lastDef = this.getWeightById(last.id);

        return !!(lastDef?.hooksBottom && weight.hooksTop);
    }

    async loadWeightAssets() {
        if (!Array.isArray(this.weightsInventory)) {
            return;
        }

        const tasks = this.weightsInventory.map(async (weight) => {
            if (!weight?.icon || this.images.weights[weight.id]) {
                return;
            }

            try {
                const img = await this.loadImage(weight.icon);
                this.images.weights[weight.id] = img;
            } catch (err) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–∑–∞ ${weight.name}:`, err.message);
            }
        });

        await Promise.all(tasks);
    }

    clampSpringPosition() {
        const rig = this.layout.springRig;
        const canvas = this.canvases.equipment;
        if (!canvas) return;

        const padding = 40;
        const minX = rig.anchorOffset.x + padding;
        const maxX = canvas.width - (rig.width - rig.anchorOffset.x) - padding;
        const minY = rig.anchorOffset.y + padding;
        const maxY = canvas.height - padding - (rig.height - rig.anchorOffset.y);

        this.state.springPosition.x = Math.min(Math.max(this.state.springPosition.x, minX), Math.max(minX, maxX));
        this.state.springPosition.y = Math.min(Math.max(this.state.springPosition.y, minY), Math.max(minY, maxY));
    }
    
    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async loadImage(src) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = () => reject(new Error(`Failed to load image: ${src}`));
            img.src = src;
        });
    }

    // Temporary placeholders (–±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ PNG)
    async createPlaceholderSpring() {
        const canvas = document.createElement('canvas');
        canvas.width = 60;
        canvas.height = 150;
        const ctx = canvas.getContext('2d');
        
        // –†–∏—Å—É–µ–º —Å–ø–∏—Ä–∞–ª—å –ø—Ä—É–∂–∏–Ω—ã
        ctx.strokeStyle = '#888';
        ctx.lineWidth = 3;
        const coils = 15;
        const coilHeight = canvas.height / coils;
        
        for (let i = 0; i < coils; i++) {
            const y = i * coilHeight;
            ctx.beginPath();
            ctx.ellipse(canvas.width / 2, y + coilHeight / 2, 25, 8, 0, 0, Math.PI * 2);
            ctx.stroke();
        }
        
        const img = new Image();
        img.src = canvas.toDataURL();
        return new Promise(resolve => {
            img.onload = () => resolve(img);
        });
    }

    async createPlaceholderStand() {
        const canvas = document.createElement('canvas');
        canvas.width = 200;
        canvas.height = 300;
        const ctx = canvas.getContext('2d');
        
        // –®—Ç–∞—Ç–∏–≤
        ctx.fillStyle = '#555';
        ctx.fillRect(80, 0, 40, 250); // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç–æ–π–∫–∞
        ctx.fillRect(0, 240, 200, 20); // –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        ctx.fillRect(80, 20, 100, 10); // –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–∞
        
        const img = new Image();
        img.src = canvas.toDataURL();
        return new Promise(resolve => {
            img.onload = () => resolve(img);
        });
    }

    async createPlaceholderWeight(mass) {
        const canvas = document.createElement('canvas');
        canvas.width = 80;
        canvas.height = 60;
        const ctx = canvas.getContext('2d');
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç –º–µ—Ç–∞–ª–ª–∞
        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
        gradient.addColorStop(0, '#9E9E9E');
        gradient.addColorStop(0.5, '#616161');
        gradient.addColorStop(1, '#424242');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(10, 10, 60, 40);
        ctx.strokeStyle = '#212121';
        ctx.lineWidth = 2;
        ctx.strokeRect(10, 10, 60, 40);
        
        // –¢–µ–∫—Å—Ç –º–∞—Å—Å—ã
        ctx.fillStyle = '#FFF';
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(`${mass}–≥`, 40, 35);
        
        const img = new Image();
        img.src = canvas.toDataURL();
        return new Promise(resolve => {
            img.onload = () => resolve(img);
        });
    }

    renderEquipmentInventory() {
        const container = this.ui?.equipmentContainer;
        if (!container) {
            console.warn('‚ö†Ô∏è Equipment container not found');
            return;
        }

        container.innerHTML = '';

        Object.values(this.equipment).forEach((equipment) => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const isDynamometer = equipment.type === 'dynamometer';
            const isSpring = equipment.type === 'spring';
            
            let isAttached = false;
            if (isDynamometer) {
                isAttached = this.state.attachedDynamometerId === equipment.id;
            } else if (isSpring) {
                isAttached = this.state.attachedSpringId === equipment.id;
            }

            const item = document.createElement('div');
            item.className = 'equipment-item';
            item.dataset.type = 'equipment';
            item.dataset.equipmentId = equipment.id;
            item.dataset.status = isAttached ? 'installed' : 'available';
            
            if (isDynamometer) {
                item.dataset.maxForce = equipment.maxForce;
            } else {
                item.dataset.stiffness = equipment.stiffnessValue;
            }

            if (isAttached) {
                item.classList.add('equipment-item--installed');
            }

            const icon = document.createElement('div');
            icon.className = 'equipment-icon';
            icon.textContent = equipment.icon;

            const title = document.createElement('div');
            title.className = 'equipment-title';
            title.textContent = equipment.name;

            const meta = document.createElement('div');
            meta.className = 'equipment-meta';
            if (isDynamometer) {
                meta.textContent = `–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ —Ö–æ–¥–µ –æ–ø—ã—Ç–∞
–í –∫–æ–º–ø–ª–µ–∫—Ç–µ`;
            } else {
                meta.textContent = '–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ —Ö–æ–¥–µ –æ–ø—ã—Ç–∞';
            }

            const status = document.createElement('div');
            status.className = 'equipment-status';
            status.textContent = isAttached ? '–ù–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–µ' : '–í –∫–æ–º–ø–ª–µ–∫—Ç–µ';

            item.append(icon, title, meta, status);

            if (isAttached) {
                const action = document.createElement('button');
                action.type = 'button';
                action.className = 'equipment-action';
                action.textContent = '–í–µ—Ä–Ω—É—Ç—å –≤ –∫–æ–º–ø–ª–µ–∫—Ç';
                action.addEventListener('click', (evt) => {
                    evt.preventDefault();
                    evt.stopPropagation();
                    if (isDynamometer) {
                        this.detachDynamometerToInventory();
                    } else {
                        this.detachSpringToInventory();
                    }
                });
                item.appendChild(action);
            } else {
                const hint = document.createElement('div');
                hint.className = 'equipment-hint';
                hint.textContent = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É';
                item.appendChild(hint);
            }

            container.appendChild(item);
        });

        this.reinitDragSources?.();
    }

    renderWeightsInventory() {
        const container = this.ui?.weightsContainer;
        if (!container) {
            console.warn('‚ö†Ô∏è Weights container not found');
            return;
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        if (this.state.attachedWeights?.length > 0) {
            console.log('[RENDER-WEIGHTS] –ü–æ–¥–≤–µ—à–µ–Ω–æ –≥—Ä—É–∑–æ–≤:', this.state.attachedWeights.length, 
                        '| –ü–æ—Å–ª–µ–¥–Ω–∏–π:', this.state.attachedWeights[this.state.attachedWeights.length - 1]?.id,
                        '| selectedWeights:', Array.from(this.state.selectedWeights));
        }

        container.innerHTML = '';

        console.log('[RENDER-WEIGHTS] üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤:');

        this.weightsInventory.forEach((weight) => {
            const isPending = this.pendingWeightIds.has(weight.id);
            const isAttached = this.state.selectedWeights.has(weight.id);
            // üÜï –ì—Ä—É–∑ "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" = –≤ usedWeightIds –ù–û –Ω–µ –ø–æ–¥–≤–µ—à–µ–Ω (—Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–∞ canvas)
            const isUsedButNotAttached = this.state.usedWeightIds.has(weight.id) && !isAttached;
            // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–∑ –ü–û–°–õ–ï–î–ù–ò–ú –≤ —Ü–µ–ø–æ—á–∫–µ (—Ç–æ–ª—å–∫–æ –µ–≥–æ –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å)
            const attachedArray = this.state.attachedWeights;
            const lastIndex = attachedArray?.length > 0 ? attachedArray.length - 1 : -1;
            const lastWeightInChain = lastIndex >= 0 ? attachedArray[lastIndex] : null;
            const isLastInChain = lastWeightInChain?.id === weight.id;
            

            
            // üÜï –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≥—Ä—É–∑–∞ –≤ —Ü–µ–ø–æ—á–∫–µ (1, 2, 3...)
            const positionInChain = isAttached ? 
                this.state.attachedWeights.findIndex(w => w.id === weight.id) + 1 : 
                null;

            // üîç –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞
            console.log(`  ‚Ä¢ ${weight.id}: isAttached=${isAttached}, isLastInChain=${isLastInChain}, pos=${positionInChain}`);

            // üîç DEBUG - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            if (isAttached && !isLastInChain && positionInChain === null) {
                console.warn(`[RENDER-WEIGHT] ‚ö†Ô∏è –ì—Ä—É–∑ –ø–æ–¥–≤–µ—à–µ–Ω –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ø–æ—á–∫–µ:`, {
                    weight_id: weight.id,
                    attachedWeights: this.state.attachedWeights.map(w => w.id)
                });
            }

            const item = document.createElement('div');
            item.className = 'weight-item';
            item.dataset.type = 'weight';
            item.dataset.mass = weight.mass;
            item.dataset.weightId = weight.id;
            item.dataset.hooksTop = weight.hooksTop ? 'true' : 'false';
            item.dataset.hooksBottom = weight.hooksBottom ? 'true' : 'false';
            item.dataset.status = isAttached ? 'attached' : isPending ? 'pending' : isUsedButNotAttached ? 'used' : 'available';

            if (isAttached || isPending || isUsedButNotAttached) {
                item.classList.add('used');
                item.classList.add('weight-item--attached');
            }

            const figure = document.createElement('div');

                    this.reinitDragSources?.();
            figure.className = 'weight-figure';

            if (weight.icon) {
                const img = document.createElement('img');
                img.src = weight.icon;
                img.alt = weight.name;
                figure.appendChild(img);
            } else {
                const placeholder = document.createElement('div');
                placeholder.className = 'weight-placeholder';
                placeholder.textContent = `${weight.mass} –≥`;
                figure.appendChild(placeholder);
            }

            const label = document.createElement('div');
            label.className = 'weight-label';
            label.textContent = weight.name;

            const meta = document.createElement('div');
            meta.className = 'weight-meta';
            meta.textContent = weight.description ?? '';

            const status = document.createElement('div');
            status.className = 'weight-status';
            
            let statusText = '–í –∫–æ–º–ø–ª–µ–∫—Ç–µ';
            if (isAttached) {
                const chainInfo = positionInChain ? ` (${positionInChain}-–π –≤ —Ü–µ–ø–æ—á–∫–µ)` : '';
                if (this.state.dynamometerAttached) {
                    statusText = `–ù–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–µ${chainInfo}`;
                } else {
                    statusText = `–ù–∞ –ø—Ä—É–∂–∏–Ω–µ${chainInfo}`;
                }
            } else if (isPending) {
                statusText = '–ü–æ–¥–≤–µ—à–∏–≤–∞–µ—Ç—Å—è‚Ä¶';
            } else if (isUsedButNotAttached) {
                statusText = '–ù–∞ —Å—Ç–æ–ª–µ'; // üÜï –ì—Ä—É–∑ —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–∞ canvas
            }
            status.textContent = statusText;

            item.append(figure, label, meta, status);

            // ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å" - –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥—Ä—É–∑–∞ –≤ —Ü–µ–ø–æ—á–∫–µ!
            if (isAttached && isLastInChain) {
                const action = document.createElement('button');
                action.type = 'button';
                action.className = 'weight-action';
                action.textContent = '–°–Ω—è—Ç—å';
                action.addEventListener('click', (evt) => {
                    evt.preventDefault();
                    evt.stopPropagation();
                    console.log('[UI] üî¥ –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å" –Ω–∞–∂–∞—Ç–∞:', {
                        weightId: weight.id,
                        isLastInChain,
                        attachedWeights: this.state.attachedWeights.map(w => w.id)
                    });
                    this.detachWeight(weight.id);
                });
                item.appendChild(action);
                console.log('[UI] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è:', weight.id, '(–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Ü–µ–ø–æ—á–∫–µ)');
            } else if (isAttached && !isLastInChain) {
                // üÜï –ì—Ä—É–∑ –ø–æ–¥–≤–µ—à–µ–Ω, –Ω–æ –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å—Å—É
                const massInfo = document.createElement('div');
                massInfo.className = 'weight-mass-info';
                massInfo.textContent = `${weight.mass} –≥`;
                item.appendChild(massInfo);
                console.log('[UI] üìä –ì—Ä—É–∑ –ø–æ–¥–≤–µ—à–µ–Ω (–ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π):', weight.id);
            } else if (isAttached) {
                // üîç DEBUG: –≥—Ä—É–∑ –ø–æ–¥–≤–µ—à–µ–Ω –Ω–æ –Ω–∏ —Ç–æ –Ω–∏ –¥—Ä—É–≥–æ–µ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                console.error('[UI] ‚ùå –ì—Ä—É–∑ –ø–æ–¥–≤–µ—à–µ–Ω –Ω–æ –∫–Ω–æ–ø–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞!', {
                    weightId: weight.id,
                    isAttached,
                    isLastInChain,
                    lastWeightInChain,
                    attachedWeights: this.state.attachedWeights
                });
            } else if (isUsedButNotAttached) {
                // üÜï –ì—Ä—É–∑ –Ω–∞ canvas (—Å–≤–æ–±–æ–¥–Ω—ã–π) - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
                const action = document.createElement('button');
                action.type = 'button';
                action.className = 'weight-action';
                action.textContent = '–£–±—Ä–∞—Ç—å';
                action.addEventListener('click', (evt) => {
                    evt.preventDefault();
                    evt.stopPropagation();
                    console.log('[UI] üî¥ –ö–Ω–æ–ø–∫–∞ "–£–±—Ä–∞—Ç—å" –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –≥—Ä—É–∑–∞:', weight.id);
                    console.log('[UI] –í—ã–∑–æ–≤ removeFreeWeight...');
                    this.removeFreeWeight(weight.id);
                });
                item.appendChild(action);
                console.log('[UI] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–£–±—Ä–∞—Ç—å" –¥–ª—è –≥—Ä—É–∑–∞:', weight.id);
            } else if (!isPending) {
                const hint = document.createElement('div');
                hint.className = 'weight-hint';
                hint.textContent = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É';
                item.appendChild(hint);
            }

            container.appendChild(item);
        });

        this.reinitDragSources?.();
    }

    resetDraggablePosition(element, clearDroppedFlag = true) {
        if (!element) return;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.dragGhost) {
            this.dragGhost.remove();
            this.dragGhost = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º transform —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        element.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out';
        element.style.transform = '';
        element.style.opacity = '';
        
        // –û—á–∏—â–∞–µ–º data –∞—Ç—Ä–∏–±—É—Ç—ã
        element.setAttribute('data-x', 0);
        element.setAttribute('data-y', 0);
        
        // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ wasDropped —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if (clearDroppedFlag && element.dataset) {
            delete element.dataset.wasDropped;
        }
        
        // –£–±–∏—Ä–∞–µ–º transition –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (element && element.style) {
                element.style.transition = '';
            }
        }, 300);
    }

    setSpringAnchor(x, y) {
        const canvas = this.canvases.dynamic;
        if (!canvas) return;

        const paddingX = 80;
        const paddingY = 60;
        const maxY = canvas.height - paddingY - (this.state.springLength || 140);

        const clampedX = Math.min(Math.max(x, paddingX), canvas.width - paddingX);
        const clampedY = Math.min(Math.max(y, paddingY), Math.max(paddingY, maxY));

        this.state.springPosition = { x: clampedX, y: clampedY };
        this.springOffset = {
            x: clampedX - canvas.width * 0.5,
            y: clampedY - canvas.height * 0.15
        };

        this.updateRigPositionFromSpring();
    }

    handleEquipmentAttach(event) {
        const element = event.relatedTarget;
        const equipmentId = element?.dataset?.equipmentId;
        const equipment = this.getEquipmentById(equipmentId);

        if (!equipment) {
            console.warn('‚ö†Ô∏è Unknown equipment id:', equipmentId);
            this.resetDraggablePosition(element);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        if (equipment.type === 'dynamometer') {
            this.handleDynamometerAttach(event, equipment, element);
        } else if (equipment.type === 'spring') {
            this.handleSpringAttach(event, equipment, element);
        }
    }

    handleDynamometerAttach(event, dynamometer, element) {
        console.log('[DYNAMOMETER] Attaching:', dynamometer.name);
        
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä—É–∂–∏–Ω–∞ - —É–±–∏—Ä–∞–µ–º –µ—ë
        if (this.state.springAttached) {
            this.showHint('–°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏—Ç–µ –ø—Ä—É–∂–∏–Ω—É. –î–∏–Ω–∞–º–æ–º–µ—Ç—Ä - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä!');
            this.resetDraggablePosition(element);
            return;
        }

        // –ï—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥—Ä—É–≥–æ–π –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä
        if (this.state.dynamometerAttached && this.state.attachedDynamometerId !== dynamometer.id) {
            this.showHint(`–ó–∞–º–µ–Ω—è–µ–º ${this.getEquipmentById(this.state.attachedDynamometerId).name} –Ω–∞ ${dynamometer.name}`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã drop –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const canvas = this.canvases.dynamic;
        const rect = canvas.getBoundingClientRect();
        const dropX = (event.dragEvent?.clientX ?? rect.left + rect.width / 2) - rect.left;
        const dropY = (event.dragEvent?.clientY ?? rect.top + rect.height * 0.4) - rect.top;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä
        this.state.dynamometerAttached = true;
        this.state.attachedDynamometerId = dynamometer.id;
        this.state.experimentMode = 'dynamometer';
        this.state.dynamometerPosition = { x: dropX, y: dropY };
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä—É–∑—ã
        this.state.attachedWeights = [];
        this.state.selectedWeights.clear();
        
        this.renderEquipmentInventory();
        this.drawDynamic();
        this.showHint(`${dynamometer.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–¥–≤–µ—Å—å—Ç–µ –≥—Ä—É–∑ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∏–ª—ã.`);
        
        this.resetDraggablePosition(element);
    }

    handleSpringAttach(event, spring, element) {
        console.log('[SPRING] Attaching:', spring.name);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä - —É–±–∏—Ä–∞–µ–º –µ–≥–æ
        if (this.state.dynamometerAttached) {
            this.showHint('–°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏—Ç–µ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä.');
            this.resetDraggablePosition(element);
            return;
        }

        const canvas = this.canvases.dynamic;
        const rect = canvas.getBoundingClientRect();
        const dropX = (event.dragEvent?.clientX ?? rect.left + rect.width / 2) - rect.left;
        const dropY = (event.dragEvent?.clientY ?? rect.top + rect.height * 0.2) - rect.top;

        const previouslyAttachedId = this.state.attachedSpringId;
        const isSameSpring = previouslyAttachedId === spring.id && this.state.springAttached;

        if (isSameSpring) {
            this.showHint(`${spring.name} —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ—ë –∑–∞ –∫—Ä—é—á–æ–∫, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ.`);
            this.resetDraggablePosition(element);
            return;
        }

        this.setSpringAnchor(dropX, dropY);

        this.state.attachedSpringId = spring.id;
        this.state.springAttached = true;
        this.state.experimentMode = 'spring';
        this.springDragged = false;
        this.physics.springConstant = spring.stiffnessValue ?? this.defaults.springConstant;
        this.state.springNaturalLength = spring.naturalLength ?? this.defaults.springNaturalLength;
        this.state.springLength = this.state.springNaturalLength;
        this.state.springElongation = 0;
        this.state.weightAttached = false;
        this.state.currentWeight = null;

        if (!previouslyAttachedId || previouslyAttachedId !== spring.id) {
            this.reset();
            this.state.springAttached = true;
            this.state.attachedSpringId = spring.id;
            this.physics.springConstant = spring.stiffnessValue ?? this.defaults.springConstant;
            this.state.springNaturalLength = spring.naturalLength ?? this.defaults.springNaturalLength;
            this.state.springLength = this.state.springNaturalLength;
            this.state.springElongation = 0;
            this.state.weightAttached = false;
            this.state.currentWeight = null;
        }

        this.renderEquipmentInventory();
        this.drawDynamic();
        this.showHint(`${spring.name} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ø–æ–¥–≤–µ—Å—å—Ç–µ –≥—Ä—É–∑.`);

        if (this.state.currentStep < 2) {
            this.state.currentStep = 2;
            this.updateProgress();
            this.handleStepChange();
        }

        this.resetDraggablePosition(element);
    }

    detachSpringToInventory() {
        if (!this.state.springAttached) return;

        this.reset();

        this.state.springAttached = false;
        this.state.attachedSpringId = null;
        this.state.weightAttached = false;
        this.state.currentWeight = null;
        this.state.springNaturalLength = this.defaults.springNaturalLength;
        this.state.springLength = this.state.springNaturalLength;
        this.state.springElongation = 0;
        this.physics.springConstant = this.defaults.springConstant;
        this.springOffset = { x: 0, y: 0 };
        this.springDragged = false;
        if (this.canvases.dynamic) {
            const canvas = this.canvases.dynamic;
            this.state.springPosition = {
                x: canvas.width * 0.5,
                y: canvas.height * 0.15
            };
        }
        
        // üÜï –û—á–∏—â–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if (this.state.freeWeights && this.state.freeWeights.length > 0) {
            console.log('[DETACH-SPRING] –í–æ–∑–≤—Ä–∞—Ç', this.state.freeWeights.length, '—Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–∑–æ–≤');
            this.state.freeWeights.forEach(fw => {
                this.state.usedWeightIds.delete(fw.weightId);
            });
            this.state.freeWeights = [];
        }

        this.renderEquipmentInventory();
        this.renderWeightsInventory(); // üÜï –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≥—Ä—É–∑–æ–≤
        this.drawDynamic();
        this.showHint('–ü—Ä—É–∂–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Ç. –ì—Ä—É–∑—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.');
    }

    detachDynamometerToInventory() {
        if (!this.state.dynamometerAttached) return;

        console.log('[DYNAMOMETER] Detaching to inventory');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–∑—ã
        this.state.attachedWeights.forEach(weight => {
            this.state.selectedWeights.delete(weight.id);
            this.state.usedWeightIds.delete(weight.id); // üÜï –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        });
        this.state.attachedWeights = [];

        // üÜï –û—á–∏—â–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if (this.state.freeWeights && this.state.freeWeights.length > 0) {
            console.log('[DETACH-DYN] –í–æ–∑–≤—Ä–∞—Ç', this.state.freeWeights.length, '—Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–∑–æ–≤');
            this.state.freeWeights.forEach(fw => {
                this.state.usedWeightIds.delete(fw.weightId);
            });
            this.state.freeWeights = [];
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞
        this.state.dynamometerAttached = false;
        this.state.attachedDynamometerId = null;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–Ω—Ç—Ä
        if (this.canvases.dynamic) {
            const canvas = this.canvases.dynamic;
            this.state.dynamometerPosition = {
                x: canvas.width * 0.5,
                y: canvas.height * 0.4
            };
        }

        this.renderEquipmentInventory();
        this.renderWeightsInventory(); // üÜï –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≥—Ä—É–∑–æ–≤
        this.drawDynamic();
        this.showHint('–î–∏–Ω–∞–º–æ–º–µ—Ç—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –∫–æ–º–ø–ª–µ–∫—Ç. –ì—Ä—É–∑—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.');
    }

    detachWeight(weightId) {
        console.log('[DETACH-WEIGHT] –ó–∞–ø—Ä–æ—Å —Å–Ω—è—Ç—å –≥—Ä—É–∑', weightId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –õ–Æ–ë–û–ï –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä –∏–ª–∏ –ø—Ä—É–∂–∏–Ω–∞)
        if (!this.state.springAttached && !this.state.dynamometerAttached) {
            console.warn('[DETACH-WEIGHT] –ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
            this.showHint('–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä –∏–ª–∏ –ø—Ä—É–∂–∏–Ω—É.');
            return;
        }

        if (this.state.isAnimating) {
            console.warn('[DETACH-WEIGHT] –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏');
            this.showHint('–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∑–∞—Ç–µ–º —Å–Ω–∏–º–∏—Ç–µ –≥—Ä—É–∑.');
            return;
        }

        if (!this.state.attachedWeights?.length) {
            console.warn('[DETACH-WEIGHT] –ù–µ—Ç –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤');
            this.showHint('–ù–µ—Ç –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤.');
            return;
        }

        const lastWeight = this.state.attachedWeights[this.state.attachedWeights.length - 1];
        if (!lastWeight || lastWeight.id !== weightId) {
            console.warn('[DETACH-WEIGHT] –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω—è—Ç—å –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥—Ä—É–∑', {
                requested: weightId,
                lastWeight: lastWeight?.id,
                chain: this.state.attachedWeights.map(item => item.id)
            });
            this.showHint('–°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ –Ω–∏–∂–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π) –≥—Ä—É–∑ –≤ —Ü–µ–ø–æ—á–∫–µ.');
            return;
        }

        console.log('[DETACH-WEIGHT] ‚úÖ –°–Ω–∏–º–∞–µ–º –≥—Ä—É–∑:', weightId);
        this.state.attachedWeights.pop();
        this.state.selectedWeights.delete(weightId);
        this.pendingWeightIds.delete(weightId);
        this.state.usedWeightIds.delete(weightId); // üÜï –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä—É–∑ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        
        console.log('[DETACH-WEIGHT] üîÑ State –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è:', {
            attachedWeights: this.state.attachedWeights.map(w => w.id),
            selectedWeights: Array.from(this.state.selectedWeights),
            usedWeightIds: Array.from(this.state.usedWeightIds)
        });
        
        this.renderWeightsInventory(); // üÜï –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        console.log('[DETACH-WEIGHT] –ì—Ä—É–∑ —Å–Ω—è—Ç, —Ü–µ–ø–æ—á–∫–∞ —Ç–µ–ø–µ—Ä—å:', this.state.attachedWeights.map(item => item.id));

        if (!this.state.attachedWeights.length) {
            this.state.weightAttached = false;
            this.state.currentWeight = null;
            this.state.currentWeightId = null;
            
            // –î–ª—è –ø—Ä—É–∂–∏–Ω—ã —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É–¥–ª–∏–Ω–µ–Ω–∏–µ
            if (this.state.springAttached) {
                this.state.springLength = this.state.springNaturalLength;
                this.state.springElongation = 0;
                this.updateVisualScale(this.state.springLength);
            }
            
            this.resetMeasurementDisplay();
            this.showHint('–ì—Ä—É–∑ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –∫–æ–º–ø–ª–µ–∫—Ç.');
        } else {
            console.log('[DETACH-WEIGHT] –ü–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –æ—Å—Ç–∞–ª–∏—Å—å –≥—Ä—É–∑—ã, –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
            const totalMass = this.state.attachedWeights.reduce((sum, item) => {
                const def = this.getWeightById(item.id);
                return sum + (def?.mass ?? 0);
            }, 0);

            this.state.weightAttached = true;
            this.state.currentWeight = totalMass;
            const currentWeight = this.state.attachedWeights[this.state.attachedWeights.length - 1];
            this.state.currentWeightId = currentWeight?.id ?? null;

            const massKg = totalMass / 1000;
            const force = massKg * this.physics.gravity;
            
            // –¢–æ–ª—å–∫–æ –¥–ª—è –ü–†–£–ñ–ò–ù–´ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É–¥–ª–∏–Ω–µ–Ω–∏–µ
            if (this.state.springAttached) {
                const elongationM = force / this.physics.springConstant;
                const elongationPx = elongationM * 100 * this.physics.pixelsPerCm;
                const targetLength = this.state.springNaturalLength + elongationPx;

                this.state.springLength = targetLength;
                this.state.springElongation = targetLength - this.state.springNaturalLength;
                this.updateVisualScale(this.state.springLength);

                const elongationCm = this.state.springElongation / this.physics.pixelsPerCm;
                this.updateCurrentMeasurementDisplay(totalMass, force, elongationCm);
                this.showHint(`–ì—Ä—É–∑ —Å–Ω—è—Ç. –¢–µ–∫—É—â–∞—è –º–∞—Å—Å–∞ –Ω–∞ –ø—Ä—É–∂–∏–Ω–µ: ${totalMass.toFixed(0)} –≥.`);
            } else {
                // –î–ª—è –î–ò–ù–ê–ú–û–ú–ï–¢–†–ê –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                this.updateCurrentMeasurementDisplay(totalMass, force, 0);
                this.showHint(`–ì—Ä—É–∑ —Å–Ω—è—Ç. –¢–µ–∫—É—â–∞—è –º–∞—Å—Å–∞ –Ω–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–µ: ${totalMass.toFixed(0)} –≥.`);
            }
        }

        this.drawDynamic();
        this.renderWeightsInventory();
        this.updateResultDisplay();
    }

    setupInteractions() {
        this.setupDragAndDrop();
    }

    setupDragAndDrop() {
        if (typeof interact === 'undefined') {
            console.error('[DRAG] interact.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        interact.dynamicDrop(true);

        const initDraggables = () => {
            interact('.weight-item').unset?.();
            interact('.equipment-item').unset?.();

            interact('.weight-item').draggable({
                inertia: false,
                autoScroll: true,
                listeners: {
                    start: (event) => this.onDragStart(event),
                    move: (event) => this.onDragMove(event),
                    end: (event) => this.onDragEnd(event)
                }
            });

            interact('.equipment-item').draggable({
                inertia: true,
                autoScroll: true,
                listeners: {
                    start: (event) => this.onDragStart(event),
                    move: (event) => this.onDragMove(event),
                    end: (event) => this.onDragEnd(event)
                }
            });
        };

        initDraggables();
        this.reinitDragSources = initDraggables;

        const overlay = document.getElementById('drag-drop-overlay');
        if (!overlay) {
            console.error('‚ùå drag-drop-overlay –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        interact('#drag-drop-overlay').unset?.();

        interact('#drag-drop-overlay').dropzone({
            accept: '.weight-item, .equipment-item',
            overlap: 0.1,
            ondrop: (event) => {
                console.log('[DROPZONE] ondrop –≤—ã–∑–≤–∞–Ω!');
                this.handleCanvasDrop(event);
            },
            ondropactivate: (event) => {
                const weightId = event.relatedTarget?.dataset?.weightId || 'unknown';
                console.log('[DROPZONE] Drop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è', weightId);
            },
            ondragenter: (event) => {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –≤—Ö–æ–¥–∏—Ç –≤ dropzone
                if (event.relatedTarget?.dataset) {
                    event.relatedTarget.dataset.wasDropped = 'true';
                    console.log('[DROPZONE] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω wasDropped=true –≤ ondragenter');
                }
            },
            ondropdeactivate: (event) => {
                console.log('[DROPZONE] Drop –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            }
        });
    }

    onDragStart(event) {
        const type = event.target.dataset.type || 'weight';
        
        // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≥—Ä—É–∑ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω?
        if (type === 'weight') {
            const weightId = event.target.dataset.weightId;
            if (this.state.usedWeightIds.has(weightId)) {
                console.log('[DRAG] ‚õî –ì—Ä—É–∑ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:', weightId);
                event.preventDefault?.();
                event.stopPropagation?.();
                return false;
            }
        }
        
        this.state.isDragging = true;
        event.target.classList.add('dragging');
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –¥–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º
        event.target.style.transition = 'none';
        event.target.style.opacity = '0.6';
        event.target.style.zIndex = '1000';
        
        // –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        const clone = event.target.cloneNode(true);
        clone.id = 'drag-ghost';
        clone.style.position = 'fixed';
        clone.style.pointerEvents = 'none';
        clone.style.zIndex = '10000';
        clone.style.opacity = '0.9';
        clone.style.transform = 'scale(1.2)';
        clone.style.boxShadow = '0 10px 30px rgba(0, 168, 107, 0.6)';
        clone.style.border = '3px solid #00A86B';
        
        const rect = event.target.getBoundingClientRect();
        clone.style.left = rect.left + 'px';
        clone.style.top = rect.top + 'px';
        clone.style.width = rect.width + 'px';
        clone.style.height = rect.height + 'px';
        
        document.body.appendChild(clone);
        this.dragGhost = clone;
        
        if (event.target.dataset) {
            event.target.dataset.wasDropped = 'false';
        }

        if (type === 'weight') {
            const mass = parseInt(event.target.dataset.mass, 10);
            this.state.currentWeight = mass;
            console.log('üéØ Drag started: –≥—Ä—É–∑', mass, '–≥');
        } else if (type === 'equipment') {
            console.log('üîß Dragging equipment item:', event.target.dataset.equipmentId);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º trail –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–ª–µ–¥–∞
        if (this.visualSettings?.dragTrail) {
            const trailColor = type === 'equipment' ? '#0066CC' : '#00A86B';
            this.particleSystem.createTrail(
                rect.left + rect.width / 2,
                rect.top + rect.height / 2,
                trailColor
            );
        }
        
        // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (this.visualSettings?.dragParticles) {
            const canvasRect = this.canvases.particles.getBoundingClientRect();
            this.particleSystem.createDustParticles(
                rect.left - canvasRect.left + rect.width / 2,
                rect.top - canvasRect.top + rect.height / 2,
                8
            );
        }
    }

    onDragMove(event) {
        const target = event.target;
        const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
        const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

        target.style.transform = `translate(${x}px, ${y}px)`;
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);

        // –î–≤–∏–≥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é –∫–æ–ø–∏—é –≤–º–µ—Å—Ç–µ —Å –∫—É—Ä—Å–æ—Ä–æ–º
        if (this.dragGhost) {
            const rect = target.getBoundingClientRect();
            this.dragGhost.style.left = rect.left + 'px';
            this.dragGhost.style.top = rect.top + 'px';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–ª–µ–¥ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        if (this.visualSettings?.dragTrail && this.dragGhost) {
            const rect = this.dragGhost.getBoundingClientRect();
            const canvasRect = this.canvases.particles.getBoundingClientRect();
            
            this.particleSystem.updateTrail(
                rect.left - canvasRect.left + rect.width / 2,
                rect.top - canvasRect.top + rect.height / 2
            );
        }
    }

    onDragEnd(event) {
        this.state.isDragging = false;
        event.target.classList.remove('dragging');
        
        const wasDropped = event.target.dataset.wasDropped === 'true';
        
        console.log('[DRAG-END] Start cleanup', {
            type: event.target.dataset.type,
            weightId: event.target.dataset.weightId,
            hasGhost: !!this.dragGhost,
            wasDropped: wasDropped
        });
        
        // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞–∫–∞ –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
        if (this.dragGhost) {
            console.log('[DRAG-END] Removing ghost');
            this.dragGhost.remove();
            this.dragGhost = null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑—Ä–∞–∫–∏ –≤ DOM
        const existingGhosts = document.querySelectorAll('#drag-ghost');
        existingGhosts.forEach(ghost => {
            console.log('[DRAG-END] Removing orphaned ghost');
            ghost.remove();
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        event.target.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out';
        event.target.style.opacity = '1';
        event.target.style.zIndex = '';
        
        // –û—á–∏—â–∞–µ–º trail
        if (this.visualSettings?.dragTrail) {
            this.particleSystem.clearTrail();
        }
        
        console.log('[DRAG-END]', {
            type: event.target.dataset.type,
            weightId: event.target.dataset.weightId,
            wasDropped: wasDropped
        });
        
        // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π drop - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—Ç–æ
        const type = event.target.dataset.type || 'weight';
        if (!wasDropped && (type === 'equipment' || type === 'weight')) {
            console.log('[DRAG-END] Resetting position (not dropped)');
            this.resetDraggablePosition(event.target);
        } else if (wasDropped) {
            console.log('[DRAG-END] Successful drop - not resetting position');
        }
    }

    handleCanvasDrop(event) {
        const itemType = event.relatedTarget?.dataset?.type || 'weight';

        console.log('[DROPZONE] –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ drop:', {
            itemType,
            isAnimating: this.state.isAnimating,
            springAttached: this.state.springAttached,
            targetId: event.target?.id,
            relatedId: event.relatedTarget?.dataset?.weightId || event.relatedTarget?.dataset?.equipmentId || 'unknown',
            overlap: event.interaction?.dropState?.rect ? 'rect-mode' : 'default'
        });

        if (itemType === 'equipment') {
            this.handleEquipmentAttach(event);
            return;
        }

        if (itemType === 'weight') {
            return this.handleWeightDrop(event);
        }

        console.warn('Unhandled drop type:', itemType);
    }

    async handleWeightDrop(event) {
        const element = event.relatedTarget;

        console.log('[ATTACH-WEIGHT] handleWeightDrop start', {
            springAttached: this.state.springAttached,
            dynamometerAttached: this.state.dynamometerAttached,
            isAnimating: this.state.isAnimating,
            selectedWeights: Array.from(this.state.selectedWeights)
        });

        const weightId = element?.dataset?.weightId;
        const weight = this.getWeightById(weightId);

        if (!weight) {
            console.warn('[ATTACH-WEIGHT] –ù–µ –Ω–∞–π–¥–µ–Ω –≤–µ—Å –ø–æ id', weightId);
            this.showHint('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥—Ä—É–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            this.resetDraggablePosition(element);
            return;
        }

        // ÔøΩ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–¥–∞ —É–ø–∞–ª –≥—Ä—É–∑
        const canvasRect = this.canvases.dynamic.getBoundingClientRect();
        const elementRect = element.getBoundingClientRect();
        
        const canvasX = elementRect.left + elementRect.width/2 - canvasRect.left;
        const canvasY = elementRect.top + elementRect.height/2 - canvasRect.top;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä—É–∂–∏–Ω—É
        let shouldAttachDirectly = false;
        let attachmentTarget = null;
        
        if (this.state.springAttached) {
            const springPos = this.state.springPosition;
            const springLength = this.state.springLength || this.state.springNaturalLength;
            const hookX = springPos.x;
            const hookY = springPos.y + springLength;
            
            const distanceToSpring = Math.hypot(canvasX - hookX, canvasY - hookY);
            
            console.log('[ATTACH-WEIGHT] Check spring drop:', {
                canvasPos: [canvasX.toFixed(1), canvasY.toFixed(1)],
                springHook: [hookX.toFixed(1), hookY.toFixed(1)],
                distance: distanceToSpring.toFixed(1),
                threshold: 80
            });
            
            if (distanceToSpring < 80) {
                shouldAttachDirectly = true;
                attachmentTarget = 'spring';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä
        if (!shouldAttachDirectly && this.state.dynamometerAttached) {
            const dynPos = this.state.dynamometerPosition;
            const hookX = dynPos.x;
            // –í—ã—Å–æ—Ç–∞ –∫–æ—Ä–ø—É—Å–∞ (300) + –Ω–∏–∂–Ω–∏–π –∫—Ä—é—á–æ–∫ (23)
            const hookY = dynPos.y + 300 + 23;
            
            const distanceToDynamometer = Math.hypot(canvasX - hookX, canvasY - hookY);
            
            console.log('[ATTACH-WEIGHT] Check dynamometer drop:', {
                canvasPos: [canvasX.toFixed(1), canvasY.toFixed(1)],
                dynHook: [hookX.toFixed(1), hookY.toFixed(1)],
                distance: distanceToDynamometer.toFixed(1),
                threshold: 80
            });
            
            if (distanceToDynamometer < 80) {
                shouldAttachDirectly = true;
                attachmentTarget = 'dynamometer';
            }
        }
        
        if (shouldAttachDirectly) {
            // üéØ –°–¶–ï–ù–ê–†–ò–ô 1: –£–ø–∞–ª –Ω–∞ –ø—Ä—É–∂–∏–Ω—É/–¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä ‚Üí –ø–æ–¥–≤–µ—à–∏–≤–∞–µ–º —Å—Ä–∞–∑—É
            console.log(`[ATTACH-WEIGHT] Direct drop on ${attachmentTarget}`);
            element.classList.add('used');
            this.resetDraggablePosition(element, false);
            this.attachWeight(weight);
            this.renderWeightsInventory(); // üÜï –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            return;
        }
        
        // üé® –°–¶–ï–ù–ê–†–ò–ô 2: –£–ø–∞–ª –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ ‚Üí —Ä–∞–∑–º–µ—â–∞–µ–º –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç
        if (!this.state.freeWeights) {
            this.state.freeWeights = [];
        }
        
        // üÜï –ü–æ–º–µ—á–∞–µ–º –≥—Ä—É–∑ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        this.state.usedWeightIds.add(weightId);
        
        const freeWeight = {
            id: `free-${Date.now()}`,
            weightId: weightId,
            mass: weight.mass,
            x: canvasX,
            y: canvasY,
            width: weight.targetSize || 88,
            height: weight.targetSize || 88,
            isDragging: false,
            isAttached: false
        };
        
        this.state.freeWeights.push(freeWeight);
        // ‚ùå –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ selectedWeights! –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤!
        // this.state.selectedWeights.add(weightId);
        element.classList.add('used');
        
        this.resetDraggablePosition(element, false);
        this.drawDynamic();
        this.renderWeightsInventory(); // üÜï –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        
        console.log('[FREE-WEIGHT] –ì—Ä—É–∑ —Ä–∞–∑–º–µ—â—ë–Ω —Å–≤–æ–±–æ–¥–Ω–æ:', {
            weightId,
            usedWeightIds: Array.from(this.state.usedWeightIds),
            selectedWeights: Array.from(this.state.selectedWeights),
            freeWeights: this.state.freeWeights.length
        });
        
        this.showToast(`‚úì –ì—Ä—É–∑ ${weight.mass}–≥ —Ä–∞–∑–º–µ—â—ë–Ω –Ω–∞ —Å—Ç–æ–ª–µ. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫ –ø—Ä—É–∂–∏–Ω–µ –¥–ª—è –ø–æ–¥–≤–µ—à–∏–≤–∞–Ω–∏—è!`);
        
        console.log('[FREE-WEIGHT] Weight placed freely:', freeWeight);
    }

    /**
     * üèóÔ∏è –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –≤ —Ü–µ–ø–æ—á–∫—É
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –í–ï–ó–î–ï –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ state
     * 
     * –õ–û–ì–ò–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô:
     * - –ì—Ä—É–∑ –ø–æ–¥–≤–µ—à–µ–Ω ‚Üí –≤ attachedWeights + selectedWeights (usedWeightIds —É–¥–∞–ª—è–µ—Ç—Å—è!)
     * - –ì—Ä—É–∑ –Ω–∞ canvas ‚Üí –≤ freeWeights + usedWeightIds (–Ω–æ –ù–ï –≤ selectedWeights)
     * - –ì—Ä—É–∑ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ ‚Üí –ù–ò –≤ —á—ë–º
     */
    addWeightToChain(weightId) {
        console.log('[ADD-TO-CHAIN] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –≤ —Ü–µ–ø–æ—á–∫—É:', weightId);
        
        if (!Array.isArray(this.state.attachedWeights)) {
            this.state.attachedWeights = [];
        }
        
        // ‚úÖ –ï–î–ò–ù–ê–Ø –¢–û–ß–ö–ê –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.state.attachedWeights.push({ id: weightId });
        this.state.selectedWeights.add(weightId);
        
        // ‚ùå –£–î–ê–õ–Ø–ï–ú –∏–∑ usedWeightIds - –≥—Ä—É–∑ —Ç–µ–ø–µ—Ä—å "–ø–æ–¥–≤–µ—à–µ–Ω", –∞ –Ω–µ "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ canvas"
        // usedWeightIds –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –Ω–∞ canvas!
        this.state.usedWeightIds.delete(weightId);
        
        console.log('[ADD-TO-CHAIN] ‚úÖ –ì—Ä—É–∑ –¥–æ–±–∞–≤–ª–µ–Ω:', {
            chain: this.state.attachedWeights.map(w => w.id),
            selectedWeights: Array.from(this.state.selectedWeights),
            usedWeightIds: Array.from(this.state.usedWeightIds)
        });
    }

    async attachWeight(weight) {
        console.log('[ATTACH-WEIGHT] attachWeight –≤—ã–∑–≤–∞–Ω', weight?.id);
        this.state.isAnimating = true;
        console.log('[ATTACH-WEIGHT] –§–ª–∞–≥ isAnimating ‚Üí true');
        this.state.weightAttached = true;

        // –û—á–∏—Å—Ç–∫–∞ –ª—é–±—ã—Ö —Ä–∞–Ω–µ–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å —Å–≤–µ—á–µ–Ω–∏—è
        this.particleSystem.clear();

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        this.addWeightToChain(weight.id);
        this.state.currentWeightId = weight.id;
        
        console.log('[ATTACH-WEIGHT] üîç –ü–†–û–í–ï–†–ö–ê –ø–æ—Å–ª–µ addWeightToChain:', {
            weightId: weight.id,
            inSelectedWeights: this.state.selectedWeights.has(weight.id),
            selectedWeights: Array.from(this.state.selectedWeights),
            inAttachedWeights: this.state.attachedWeights.some(w => w.id === weight.id),
            attachedWeights: this.state.attachedWeights.map(w => w.id)
        });

        const totalMass = this.state.attachedWeights.reduce((sum, item) => {
            const def = this.getWeightById(item.id);
            return sum + (def?.mass ?? 0);
        }, 0);

        console.log('[ATTACH-WEIGHT] –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è –º–∞—Å—Å–∞ (–≥):', totalMass);

        this.state.currentWeight = totalMass;

        const massKg = totalMass / 1000;
        const force = massKg * this.physics.gravity; // F = mg (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)

        // === –†–ï–ñ–ò–ú –ü–†–£–ñ–ò–ù–´ (–æ—Å–Ω–æ–≤–Ω–æ–π) ===
        if (this.state.springAttached) {
            const elongationM = force / this.physics.springConstant;
            const elongationPx = elongationM * 100 * this.physics.pixelsPerCm;

            console.log('[SPRING MODE] –†–∞—Å—á—ë—Ç —É–¥–ª–∏–Ω–µ–Ω–∏—è', {
                massKg,
                force,
                elongationM,
                elongationPx
            });

            const targetLength = this.state.springNaturalLength + elongationPx;

            console.log('[ATTACH-WEIGHT] –¶–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞ –ø—Ä—É–∂–∏–Ω—ã (px):', targetLength);

            this.updateVisualScale(targetLength);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
            this.showHint(`–ì—Ä—É–∑ ${weight.name} –ø–æ–¥–≤–µ—à–µ–Ω. –ú–∞—Å—Å–∞: ${totalMass} –≥. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∫–æ–ª–µ–±–∞–Ω–∏—è...`);

            // –ò–ó–ú–ï–†–ï–ù–ò–ï –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—Ä–∞–∑—É
            const elongationCm = elongationPx / this.physics.pixelsPerCm;
            this.updateCurrentMeasurementDisplay(totalMass, force, elongationCm);

            console.log('[ATTACH-WEIGHT] –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è');
            this.currentAnimation = this.animateSpringStretch(targetLength, massKg);
            try {
                await this.currentAnimation;
            } finally {
                this.currentAnimation = null;
            }
            console.log('[ATTACH-WEIGHT] –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞—Ç—É—Ö–∞–Ω–∏—è –∫–æ–ª–µ–±–∞–Ω–∏–π
            const finalElongationCm = this.state.springElongation / this.physics.pixelsPerCm;
            
            // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            this.showHint(`–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –£–¥–ª–∏–Ω–µ–Ω–∏–µ: ${finalElongationCm.toFixed(2)} —Å–º. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É.`);
        }

        // === –†–ï–ñ–ò–ú –î–ò–ù–ê–ú–û–ú–ï–¢–†–ê (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) ===
        if (this.state.dynamometerAttached) {
            console.log('[DYNAMOMETER MODE - OPTIONAL CHECK] –í–µ—Å –ø–æ–¥–≤–µ—à–µ–Ω –∫ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä—É', {
                totalMass,
                theoreticalForce: force.toFixed(3) + ' –ù'
            });

            this.showHint(`‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞: –ì—Ä—É–∑ ${weight.name} (${totalMass} –≥). –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞: ${force.toFixed(2)} –ù. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø–æ–∫–∞–∑–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞!`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            this.state.lastDynamometerReading = force;
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä —Å –Ω–æ–≤—ã–º –ø–æ–∫–∞–∑–∞–Ω–∏–µ–º
            this.drawDynamic();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            this.updateCurrentMeasurementDisplay(totalMass, force, 0);
        }

        this.state.isAnimating = false;
        console.log('[ATTACH-WEIGHT] –§–ª–∞–≥ isAnimating ‚Üí false');
        this.renderWeightsInventory(); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ –ø–æ–¥–≤–µ—à–∏–≤–∞–Ω–∏—è
        this.updateRecordButton();
    }

    async animateSpringStretch(targetLength, mass) {
        return new Promise(resolve => {
            const startLength = this.state.springLength;
            const startTime = performance.now();
            const duration = 2500; // 2.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏

            console.log('[ANIMATION] –ó–∞–ø—É—Å–∫ animateSpringStretch', {
                startLength,
                targetLength,
                mass,
                currentTime: startTime
            });

            const animateFrame = (currentTime) => {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1);

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∑–∏–∫—É –æ—Å—Ü–∏–ª–ª—è—Ü–∏–∏ –∏–∑ physics-engine
                const oscillation = springOscillation(
                    this.physics.springConstant,
                    mass,
                    (targetLength - startLength) / (this.physics.pixelsPerCm * 100), // –º
                    elapsed / 1000 // —Å–µ–∫
                );

                this.state.springLength = startLength + oscillation * this.physics.pixelsPerCm * 100;
                this.state.springElongation = this.state.springLength - this.state.springNaturalLength;

                this.updateVisualScale(this.state.springLength);

                // –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–ö–ê–ó–ê–ù–ò–Ø –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò –≤–æ –≤—Ä–µ–º—è –∫–æ–ª–µ–±–∞–Ω–∏–π
                const totalMass = this.state.attachedWeights.reduce((sum, item) => {
                    const def = this.getWeightById(item.id);
                    return sum + (def?.mass ?? 0);
                }, 0);
                const force = (totalMass / 1000) * this.physics.gravity;
                const currentElongationCm = this.state.springElongation / this.physics.pixelsPerCm;
                this.updateCurrentMeasurementDisplay(totalMass, force, currentElongationCm);

                if (progress < 1) {
                    requestAnimationFrame(animateFrame);
                } else {
                    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                    this.state.springLength = targetLength;
                    this.state.springElongation = targetLength - this.state.springNaturalLength;
                    this.updateVisualScale(this.state.springLength);
                    
                    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π
                    const finalElongationCm = this.state.springElongation / this.physics.pixelsPerCm;
                    this.updateCurrentMeasurementDisplay(totalMass, force, finalElongationCm);
                    
                    console.log('[ANIMATION] –ü—Ä–æ–π–¥–µ–Ω–æ 100% –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º');
                    resolve();
                }
            };

            requestAnimationFrame(animateFrame);
        });
    }

    takeMeasurement(mass, elongationCm) {
        // –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        // –†–µ–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ"
        const force = (mass / 1000) * this.physics.gravity;
        
        console.log('[MEASURE] –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø–∏—Å–∏', { mass, force, elongationCm });
        
        // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.updateCurrentMeasurementDisplay(mass, force, elongationCm);

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏
        this.updateRecordButton();

        if (this.visualSettings.measurementParticles) {
            this.particleSystem.createSuccess(
                this.state.springPosition.x,
                this.state.springPosition.y + this.state.springLength
            );
        }

        // –ó–≤—É–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        this.playSound('measurement');

        console.log('üìä Measurement ready to record:', { mass, force, elongationCm });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —à–∞–≥–æ–≤
        if (this.state.currentStep < 2) {
            this.state.currentStep = 2;
            this.updateProgress();
            this.handleStepChange();
        }

        if (this.state.measurements.length >= 3) {
            this.showHint(`‚úÖ –û—Ç–ª–∏—á–Ω–æ! ${this.state.measurements.length} –∏–∑–º–µ—Ä–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
        }
    }

    updateCurrentMeasurementDisplay(mass, force, elongationCm) {
        const massEl = document.getElementById('current-mass');
        const elongationEl = document.getElementById('current-elongation');

        if (massEl) {
            massEl.textContent = Number.isFinite(mass) ? mass.toFixed(0) : '‚Äî';
        }

        // –°–∏–ª—É –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —É—á–µ–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–Ω—è—Ç—å —Å –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞

        if (elongationEl) {
            elongationEl.textContent = Number.isFinite(elongationCm) ? elongationCm.toFixed(2) : '‚Äî';
        }
    }

    resetMeasurementDisplay() {
        this.updateCurrentMeasurementDisplay(NaN, NaN, NaN);
    }

    // –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ updateMeasurementsTable —É–¥–∞–ª—ë–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è renderMeasurementsTable

    calculateSpringConstant() {
        const count = this.state.measurements.length;
        if (count === 0) {
            return null;
        }

        // –î–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ F/Œîl (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        if (count === 1) {
            const measurement = this.state.measurements[0];
            const elongationM = measurement.elongationM || (measurement.elongationCm / 100);
            if (elongationM <= 0) {
                return null;
            }

            const k = measurement.force / elongationM;
            return {
                k,
                r2: null,
                points: count,
                equation: `F = ${k.toFixed(1)} √ó Œîl`,
                quality: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ'
            };
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (2 –∏ –±–æ–ª–µ–µ —Ç–æ—á–µ–∫)
        const points = this.state.measurements.map(m => ({
            x: m.elongationM || (m.elongationCm / 100),
            y: m.force
        }));

        const regression = linearRegression(points);
        const springConstant = regression.slope;
        const r2 = regression.r2;

        return {
            k: springConstant,
            r2,
            points: count,
            equation: `F = ${springConstant.toFixed(1)} √ó Œîl`,
            quality: r2 >= 0.98 ? '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ' : r2 >= 0.95 ? '–û—Ç–ª–∏—á–Ω–æ' : r2 >= 0.90 ? '–•–æ—Ä–æ—à–æ' : '–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è'
        };
    }

    updateResultDisplay() {
        const valueElement = document.getElementById('calculated-k');
        const accuracyContainer = document.getElementById('accuracy-indicator');
        const accuracyFill = accuracyContainer?.querySelector('.accuracy-fill');
        const accuracyLabel = accuracyContainer?.querySelector('.accuracy-label');

        if (!valueElement || !accuracyContainer || !accuracyFill || !accuracyLabel) {
            return;
        }

        const result = this.calculateSpringConstant();

        if (!result || !Number.isFinite(result.k)) {
            valueElement.textContent = '‚Äî';
            accuracyFill.style.width = '0%';
            accuracyLabel.textContent = '–¢–æ—á–Ω–æ—Å—Ç—å: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ';
            this.updateCompletionState(false);
            return;
        }

        valueElement.textContent = result.k.toFixed(1);

        if (result.points === 1 || result.r2 === null) {
            accuracyFill.style.width = '35%';
            accuracyFill.style.background = 'rgba(255, 193, 7, 0.8)';
            accuracyLabel.textContent = '–¢–æ—á–Ω–æ—Å—Ç—å: –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–∑–º–µ—Ä–µ–Ω–∏—è)';
            this.updateCompletionState(false);
        } else {
            const accuracyPercent = Math.min(100, Math.max(0, Math.round(result.r2 * 100)));
            accuracyFill.style.width = `${accuracyPercent}%`;
            accuracyFill.style.background = accuracyPercent > 90 ? 'rgba(0, 168, 107, 0.85)' : accuracyPercent > 75 ? 'rgba(255, 193, 7, 0.85)' : 'rgba(244, 67, 54, 0.85)';
            accuracyLabel.textContent = `–¢–æ—á–Ω–æ—Å—Ç—å: R¬≤ = ${result.r2.toFixed(3)} (${result.quality})`;
            this.updateCompletionState(result.points >= 3 && result.r2 >= 0.9);
        }
    }

    resetResultDisplay() {
        const valueElement = document.getElementById('calculated-k');
        const accuracyContainer = document.getElementById('accuracy-indicator');
        const accuracyFill = accuracyContainer?.querySelector('.accuracy-fill');
        const accuracyLabel = accuracyContainer?.querySelector('.accuracy-label');

        if (!valueElement || !accuracyFill || !accuracyLabel) {
            return;
        }

        valueElement.textContent = '‚Äî';
        accuracyFill.style.width = '0%';
        accuracyFill.style.background = 'rgba(255,255,255,0.2)';
        accuracyLabel.textContent = '–¢–æ—á–Ω–æ—Å—Ç—å: –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        this.updateCompletionState(false);
    }

    updateCompletionState(ready) {
        const completeBtn = document.getElementById('btn-complete');
        if (!completeBtn) return;

        completeBtn.disabled = !ready;
        completeBtn.classList.toggle('pulse', ready);
    }

    showAchievement(result) {
        const popup = document.getElementById('achievement-popup');
        const title = popup.querySelector('h3');
        const desc = popup.querySelector('p');

        let stars = 3;
        if (result.r2 > 0.98) stars = 3;
        else if (result.r2 > 0.95) stars = 2;
        else stars = 1;

        title.textContent = `üéâ ${stars === 3 ? '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ' : stars === 2 ? '–û—Ç–ª–∏—á–Ω–æ' : '–•–æ—Ä–æ—à–æ'}!`;
        desc.innerHTML = `
            –ñ—ë—Å—Ç–∫–æ—Å—Ç—å –ø—Ä—É–∂–∏–Ω—ã: <strong>${result.k.toFixed(1)} –ù/–º</strong><br>
            –¢–æ—á–Ω–æ—Å—Ç—å: <strong>${result.quality}</strong><br>
            ${'‚≠ê'.repeat(stars)}
        `;

        popup.classList.add('show');

        setTimeout(() => {
            popup.classList.remove('show');
        }, 5000);
    }

    setupEventListeners() {
        const helpButton = document.getElementById('btn-help');
        const resetButton = document.getElementById('btn-reset');
        const completeButton = document.getElementById('btn-complete');
        const settingsButton = document.getElementById('btn-settings');
        const recordButton = document.getElementById('btn-record-measurement');
        const calculateButton = document.getElementById('btn-calculate');
        const switchModeButton = document.getElementById('btn-switch-mode');

        helpButton?.addEventListener('click', () => {
            document.getElementById('help-modal').style.display = 'block';
        });

        resetButton?.addEventListener('click', () => {
            this.reset();
            this.showHint('–ò–∑–º–µ—Ä–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –≤—ã–±–æ—Ä–∞ –ø—Ä—É–∂–∏–Ω—ã.');
        });

        completeButton?.addEventListener('click', () => {
            this.finishExperiment();
        });

        settingsButton?.addEventListener('click', () => {
            this.showHint('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ. –ü–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç!');
        });

        recordButton?.addEventListener('click', () => {
            console.log('[BUTTON-CLICK] –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å" –Ω–∞–∂–∞—Ç–∞');
            this.recordMeasurementDirect();
        });

        calculateButton?.addEventListener('click', () => {
            this.calculateAndDisplayResult();
        });

        // –£–î–ê–õ–ï–ù–û: switchModeButton - –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤

        // Force input modal handlers
        document.getElementById('close-force-modal')?.addEventListener('click', () => {
            this.closeForceInputModal();
        });
        
        document.getElementById('cancel-force-input')?.addEventListener('click', () => {
            this.closeForceInputModal();
        });
        
        document.getElementById('confirm-force-input')?.addEventListener('click', () => {
            this.confirmForceInput();
        });
        
        document.querySelector('#help-modal .modal-close')?.addEventListener('click', () => {
            document.getElementById('help-modal').style.display = 'none';
        });
    }

    handleStepChange() {
        switch (this.state.currentStep) {
            case 1:
                this.showHint('üìå –®–∞–≥ 1: –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø—Ä—É–∂–∏–Ω—É –∏–∑ —Å–µ–∫—Ü–∏–∏ ¬´–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ¬ª, –∑–∞—Ç–µ–º –ø–æ–¥–≤–µ—Å—å—Ç–µ –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑.');
                break;
            case 2:
                if (!this.state.springAttached) {
                    this.showHint('üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä—É–∂–∏–Ω—É –Ω–∞ —à—Ç–∞—Ç–∏–≤, –∑–∞—Ç–µ–º –ø–æ–¥–≤–µ—Å—å—Ç–µ –≥—Ä—É–∑.');
                } else {
                    this.showHint('üìä –ó–∞–ø–∏—à–∏—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –µ—â—ë –≥—Ä—É–∑—ã –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.');
                }
                break;
            case 3:
                this.showHint('üìà –†–∞—Å—á—ë—Ç –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–æ–±–∞–≤—å—Ç–µ 3-5 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.');
                break;
            case 4:
                this.showHint('‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è.');
                this.state.experimentComplete = true;
                break;
        }
    }

    updateProgress() {
        // Progress bar removed - method kept for compatibility
    }

    showHint(message) {
        const hintContainer = document.getElementById('hint-box');
        const hintText = document.getElementById('hint-text');
        if (!hintContainer || !hintText) return;

        hintContainer.style.display = 'flex';
        hintText.textContent = message;
        hintContainer.classList.add('pulse');
        setTimeout(() => {
            hintContainer.classList.remove('pulse');
        }, 2000);
    }

    showError(message) {
        alert(message); // TODO: –∫—Ä–∞—Å–∏–≤—ã–π error popup
    }

    playSound(type) {
        // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        // const audio = new Audio(`/assets/sounds/${type}.mp3`);
        // audio.play().catch(() => {});
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    //  –ù–û–í–ê–Ø –£–ü–†–û–©–Å–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ü–ò–°–ò (–ë–ï–ó –ú–û–î–ê–õ–û–ö!)
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    /**
     * –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –∏–∑–º–µ—Ä–µ–Ω–∏—è - –£–ü–†–û–©–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    recordMeasurementDirect() {
        if (this.state.attachedWeights.length === 0) {
            this.showHint('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≤–µ—Å—å—Ç–µ –≥—Ä—É–∑ –Ω–∞ –ø—Ä—É–∂–∏–Ω—É!');
            return;
        }

        const weightCount = this.state.attachedWeights.length;
        const totalMass = this.state.attachedWeights.reduce((sum, w) => {
            const weightDef = this.getWeightById(w.id);
            return sum + (weightDef?.mass || 0);
        }, 0);

        // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô —Ä–∞—Å—á—ë—Ç —Å–∏–ª—ã F = mg
        const force = (totalMass / 1000) * this.physics.gravity;
        
        // –£–¥–ª–∏–Ω–µ–Ω–∏–µ
        const elongationCm = this.state.springElongation / this.physics.pixelsPerCm;

        if (!elongationCm || elongationCm <= 0) {
            this.showHint('–û—à–∏–±–∫–∞: –ø—Ä—É–∂–∏–Ω–∞ –Ω–µ —Ä–∞—Å—Ç—è–Ω—É—Ç–∞!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const isDuplicate = this.state.measurements.some(m => 
            m.weightCount === weightCount
        );

        if (isDuplicate) {
            this.showHint(`–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è ${weightCount} –≥—Ä—É–∑–∞(–æ–≤) —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ!`);
            return;
        }

        // –ó–ê–ü–ò–°–¨ –ò–ó–ú–ï–†–ï–ù–ò–Ø
        const measurement = {
            id: Date.now(),
            number: this.state.measurements.length + 1,
            weightCount: weightCount,
            mass: totalMass,
            force: force, // F = mg (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)
            elongationCm: elongationCm,
            elongationM: elongationCm / 100,
            stiffness: force / (elongationCm / 100), // k = F / Œîl
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–µ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞
            dynamometerReading: this.state.lastDynamometerReading,
            dynamometerDiff: this.state.lastDynamometerReading ? 
                Math.abs(this.state.lastDynamometerReading - force) : null
        };

        this.state.measurements.push(measurement);
        
        console.log('[RECORD] –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ:', measurement);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.renderMeasurementsTable();
        this.updateRecordButton();
        this.calculateAndDisplayFinalResult();
        this.updateProgress();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const diffText = measurement.dynamometerDiff !== null ? 
            ` (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞: ${(measurement.dynamometerDiff * 100 / force).toFixed(1)}%)` : '';
        this.showToast(`‚úì –ó–∞–ø–∏—Å–∞–Ω–æ: k = ${measurement.stiffness.toFixed(1)} –ù/–º${diffText}`);

        // –≠—Ñ—Ñ–µ–∫—Ç—ã
        if (this.visualSettings?.measurementParticles) {
            this.particleSystem.createSuccess(
                this.state.springPosition.x,
                this.state.springPosition.y + this.state.springLength
            );
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–µ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞
        this.state.lastDynamometerReading = null;
    }

    /**
     * –≠–¢–ê–ü 1: –ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∏–ª—ã
     */
    /**
     * @deprecated –°–¢–ê–†–´–ô –ú–ï–¢–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è recordMeasurementDirect() - —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
     */
    recordForceMeasurement() {
        console.warn('[DEPRECATED] recordForceMeasurement() —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ recordMeasurementDirect()');
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        this.recordMeasurementDirect();
    }

    /**
     * @deprecated –°–¢–ê–†–´–ô –ú–ï–¢–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è recordMeasurementDirect() - —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
     */
    recordStiffnessMeasurement() {
        console.warn('[DEPRECATED] recordStiffnessMeasurement() —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ recordMeasurementDirect()');
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        this.recordMeasurementDirect();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showToast(message) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π toast –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldToast = document.querySelector('.toast-notification');
        if (oldToast) {
            oldToast.remove();
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        const toast = document.createElement('div');
        toast.className = 'toast-notification';
        toast.innerHTML = `
            <span class="toast-icon">‚úì</span>
            <span>${message}</span>
        `;
        document.body.appendChild(toast);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            toast.remove();
        }, 3000);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
     */
    updateProgress() {
        const progressIndicator = document.getElementById('progress-indicator');
        const progressText = document.getElementById('progress-text');
        const progressFill = document.getElementById('progress-fill');

        if (!progressIndicator) return;

        if (this.state.experimentMode === 'dynamometer') {
            // –≠–¢–ê–ü 1
            const count = this.state.forces.length;
            const total = 3; // –ú–∏–Ω–∏–º—É–º 3 –∏–∑–º–µ—Ä–µ–Ω–∏—è
            const percent = Math.min((count / total) * 100, 100);

            progressIndicator.style.display = 'block';
            progressText.textContent = `–ò–∑–º–µ—Ä–µ–Ω–æ: ${count}/${total}`;
            progressFill.style.width = `${percent}%`;

        } else if (this.state.experimentMode === 'spring') {
            // –≠–¢–ê–ü 2
            const count = this.state.measurements.length;
            const total = 3; // –ú–∏–Ω–∏–º—É–º 3 –∏–∑–º–µ—Ä–µ–Ω–∏—è
            const percent = Math.min((count / total) * 100, 100);
            progressIndicator.style.display = 'block';
            progressText.textContent = `–ò–∑–º–µ—Ä–µ–Ω–æ: ${count}/${total}`;
            progressFill.style.width = `${percent}%`;
        }
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    //  –û–¢–†–ò–°–û–í–ö–ê –¢–ê–ë–õ–ò–¶–´ –ò–ó–ú–ï–†–ï–ù–ò–ô
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
     */
    renderMeasurementsTable() {
        const tbody = document.getElementById('measurements-tbody');
        const tableTitle = document.getElementById('table-title');
        const tableCount = document.getElementById('table-count');
        const tableHeader = document.getElementById('table-header');
        const emptyMessage = document.getElementById('empty-message');
        
        if (!tbody) return;

        const measurements = this.state.measurements;

        // –£–ü–†–û–©–Å–ù–ù–´–ô –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã - –±–µ–∑ —ç—Ç–∞–ø–æ–≤!
        if (tableTitle) {
            tableTitle.innerHTML = `üìä –¢–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        if (tableCount) {
            const count = measurements.length;
            const word = count === 1 ? '–∏–∑–º–µ—Ä–µ–Ω–∏–µ' : (count >= 2 && count <= 4) ? '–∏–∑–º–µ—Ä–µ–Ω–∏—è' : '–∏–∑–º–µ—Ä–µ–Ω–∏–π';
            tableCount.textContent = `${count} ${word}`;
        }

        // –ï–î–ò–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
        if (tableHeader) {
            tableHeader.innerHTML = `
                <tr>
                    <th>‚Ññ</th>
                    <th>m, –≥</th>
                    <th title="–°–∏–ª–∞ —É–ø—Ä—É–≥–æ—Å—Ç–∏ F = mg">F, –ù</th>
                    <th title="–£–¥–ª–∏–Ω–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã">Œîl, —Å–º</th>
                    <th title="–ñ—ë—Å—Ç–∫–æ—Å—Ç—å k = F / Œîl">k, –ù/–º</th>
                    <th></th>
                </tr>
            `;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π
        if (measurements.length === 0) {
            if (emptyMessage) {
                emptyMessage.textContent = '–ü–æ–¥–≤–µ—Å—å—Ç–µ –≥—Ä—É–∑ –Ω–∞ –ø—Ä—É–∂–∏–Ω—É –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø–∏—Å–∞—Ç—å"';
            }
            tbody.innerHTML = `<tr class="empty-state"><td colspan="6">–ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π</td></tr>`;
            return;
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –í–°–ï–ú–ò –¥–∞–Ω–Ω—ã–º–∏
        tbody.innerHTML = measurements.map((m, index) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä, –µ—Å–ª–∏ –±—ã–ª
            const dynamometerHint = m.dynamometerReading ? 
                ` title="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–æ–º: ${m.dynamometerReading.toFixed(2)} –ù (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ${(m.dynamometerDiff * 100 / m.force).toFixed(1)}%)"` : '';
            
            return `
                <tr data-measurement-id="${m.id}" class="just-added">
                    <td>${index + 1}</td>
                    <td>${m.mass}</td>
                    <td${dynamometerHint}>${m.force.toFixed(2)}${m.dynamometerReading ? ' ‚úì' : ''}</td>
                    <td>${m.elongationCm.toFixed(2)}</td>
                    <td><strong>${m.stiffness.toFixed(1)}</strong></td>
                    <td>
                        <button class="btn-delete" onclick="experiment.deleteMeasurement(${m.id})">
                            ‚úï
                        </button>
                    </td>
                </tr>
            `;
        }).join('');

        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ—Å–ª–µ 2 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            const rows = tbody.querySelectorAll('.just-added');
            rows.forEach(row => row.classList.remove('just-added'));
        }, 2000);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ - –£–ü–†–û–©–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    deleteMeasurement(id) {
        this.state.measurements = this.state.measurements.filter(m => m.id !== id);
        this.renderMeasurementsTable();
        this.calculateAndDisplayFinalResult(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.updateRecordButton();
        this.updateProgress();
        console.log('[DELETE] –ò–∑–º–µ—Ä–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', id);
        this.showToast('–ò–∑–º–µ—Ä–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    //  –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ö–ù–û–ü–û–ö –ò –≠–õ–ï–ú–ï–ù–¢–û–í UI
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å"
     */
    updateRecordButton() {
        const btn = document.getElementById('btn-record-measurement');
        if (!btn) {
            console.warn('[UPDATE-BTN] –ö–Ω–æ–ø–∫–∞ btn-record-measurement –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            return;
        }

        const canRecord = this.state.attachedWeights.length > 0 && !this.state.isAnimating;
        btn.disabled = !canRecord;
        
        console.log('[UPDATE-BTN] –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å":', {
            attachedWeights: this.state.attachedWeights.length,
            isAnimating: this.state.isAnimating,
            canRecord,
            disabled: btn.disabled
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
     */
    updateCalculateButton() {
        const btn = document.getElementById('btn-calculate');
        if (!btn) return;

        btn.disabled = this.state.measurements.length === 0;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≠–¢–ê–ü 2
     */
    // –£–î–ê–õ–ï–ù–û: updateSwitchButton() - –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≠–¢–ê–ü 2 (–∏–∑–º–µ—Ä–µ–Ω–∏–µ –∂—ë—Å—Ç–∫–æ—Å—Ç–∏)
     */
    // –£–î–ê–õ–ï–ù–û: switchToStage2() - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏)
     */
    calculateAndDisplayFinalResult() {
        if (this.state.measurements.length === 0) {
            this.resetResultDisplay();
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∂—ë—Å—Ç–∫–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateResultDisplay();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        const result = this.calculateSpringConstant();
        if (result && result.points >= 3 && result.r2 >= 0.9) {
            this.updateCompletionState(true);
            this.showHint('–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç.');
        } else if (this.state.measurements.length < 3) {
            this.showHint('–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-5 —Ç–æ—á–µ–∫).');
        } else {
            this.showHint('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–∑–º–µ—Ä–µ–Ω–∏—è.');
        }
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    calculateAndDisplayResult() {
        this.calculateAndDisplayFinalResult();
    }

    reset() {
        this.state.currentStep = 1;
        this.state.measurements = [];
        this.state.selectedWeights.clear();
    this.pendingWeightIds.clear();
        this.state.attachedWeights = [];
        this.state.weightAttached = false;
        this.state.currentWeight = null;
        this.state.currentWeightId = null;
        this.state.springLength = this.state.springNaturalLength;
        this.state.springElongation = 0;
        this.state.experimentComplete = false;

        this.visual.scale = 1;
        this.updateVisualScale(this.state.springLength);

        this.attachmentManager?.clear();

        document.querySelectorAll('.weight-item').forEach(item => {
            item.classList.remove('used');
            item.style.transform = '';
            item.setAttribute('data-x', 0);
            item.setAttribute('data-y', 0);
        });

        this.renderWeightsInventory();

        this.resetMeasurementDisplay();
        
        this.updateProgress();
        this.renderMeasurementsTable();
        this.updateRecordButton();
        this.updateCalculateButton();
        this.resetResultDisplay();

        console.log('üîÑ Experiment reset');
    }

    resizeCanvases() {
        const container = document.querySelector('.canvas-container');
        const width = container.clientWidth;
        const height = container.clientHeight;

        Object.values(this.canvases).forEach(canvas => {
            canvas.width = width;
            canvas.height = height;
        });

        this.updateVisualScale(this.state.springLength || this.state.springNaturalLength);

        // Redraw static elements
        this.drawBackground();
        this.drawEquipment();
    }

    getVisualPixelsPerCm() {
        return this.physics.pixelsPerCm * this.visual.scale;
    }

    getVisualLength(lengthPx = null) {
        const physicalLength = lengthPx ?? (this.state.springLength || this.state.springNaturalLength);
        return physicalLength * this.visual.scale;
    }

    estimateWeightStackHeight() {
        if (!this.state.attachedWeights?.length) {
            return 140;
        }

    const baseClearance = 60;
        return this.state.attachedWeights.reduce((total, item) => {
            const def = this.getWeightById(item.id);
            const hookGap = def?.hookGap ?? 28;
            const targetSize = def?.targetSize ?? 88;
            return total + hookGap + targetSize;
        }, baseClearance);
    }

    updateVisualScale(requiredLengthPx) {
        if (!Number.isFinite(requiredLengthPx)) {
            requiredLengthPx = this.state.springNaturalLength;
        }

        const canvas = this.canvases.dynamic;
        if (!canvas) {
            this.visual.scale = 1;
            return;
        }

        const anchorY = this.state.springPosition?.y ?? canvas.height * 0.25;
        const stackHeight = this.estimateWeightStackHeight();
        const available = canvas.height - anchorY - stackHeight - this.visual.marginBottom;

        if (available <= 0) {
            this.visual.scale = this.visual.minScale;
            return;
        }

        if (requiredLengthPx > available) {
            const proposed = available / requiredLengthPx;
            this.visual.scale = Math.max(this.visual.minScale, Math.min(1, proposed));
        } else {
            this.visual.scale = 1;
        }
    }

    drawBackground() {
        canvasUtils.clear(this.contexts.background);
    }

    drawEquipment() {
        const ctx = this.contexts.equipment;
        canvasUtils.clear(ctx);
    }

    drawDynamic() {
        const ctx = this.contexts.dynamic;
        
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ctx.save();
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.restore();

        const canvas = ctx.canvas;

        // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –î–ò–ù–ê–ú–û–ú–ï–¢–† - —Ä–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if (this.state.dynamometerAttached) {
            this.drawDynamometerSetup(ctx);
            return;
        }

        // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ü–†–£–ñ–ò–ù–ê - —Ä–∏—Å—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –ø—Ä—É–∂–∏–Ω–æ–π
        if (!this.state.springAttached) {
            this.drawSpringPlaceholder(ctx);
            return;
        }

        const anchor = this.getSpringAnchor();

        const physicalLength = this.state.springLength || this.state.springNaturalLength;
        const length = this.getVisualLength(physicalLength);
        const coils = 14;
        const wireRadius = 5;
        const springRadius = 22;

        // –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        this.drawEquipmentLabel(ctx, anchor.x, anchor.y - 35);

        // –†–∏—Å—É–µ–º –≤–∏—Ç–∫–∏ –ø—Ä—É–∂–∏–Ω—ã –∫–∞–∫ —ç–ª–ª–∏–ø—Å—ã
        this.drawSpringCoils(ctx, anchor, length, coils, springRadius, wireRadius);
        
        // –í–µ—Ä—Ö–Ω–∏–π –∫—Ä—é—á–æ–∫
        this.drawTopHook(ctx, anchor.x, anchor.y, wireRadius);
        
        // –ù–∏–∂–Ω–∏–π –∫—Ä—é—á–æ–∫
        this.drawBottomHook(ctx, anchor.x, anchor.y + length, wireRadius);

        // –ü–æ–¥–≤–µ—à–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
        this.drawAttachedWeights(ctx, anchor.x, anchor.y + length);
        
        // –ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞
        this.drawRuler(ctx, anchor.x + 80, anchor.y, physicalLength);
        
        // üÜï –†–∏—Å—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã
        this.drawFreeWeights(ctx);
        
        // üéØ –ó–æ–Ω–∞ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è: –µ—Å–ª–∏ —Ç–∞—â–∏–º –≥—Ä—É–∑, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å
        const draggedWeight = this.state.freeWeights?.find(w => w.isDragging);
        if (draggedWeight) {
            ctx.save();
            ctx.strokeStyle = 'rgba(0, 255, 100, 0.8)';
            ctx.lineWidth = 3;
            ctx.setLineDash([8, 4]);
            
            // –ó–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥ –≤–æ–∫—Ä—É–≥ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä—é—á–∫–∞ –ø—Ä—É–∂–∏–Ω—ã
            const springBottomHookX = anchor.x;
            const springBottomHookY = anchor.y + length;
            ctx.beginPath();
            ctx.arc(springBottomHookX, springBottomHookY, 60, 0, Math.PI * 2);
            ctx.stroke();
            
            // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
            ctx.fillStyle = 'rgba(0, 255, 100, 0.1)';
            ctx.fill();
            
            ctx.restore();
        }
    }
    
    drawFreeWeights(ctx) {
        if (!this.state.freeWeights || this.state.freeWeights.length === 0) return;
        
        this.state.freeWeights.forEach(weight => {
            const weightDef = this.getWeightById(weight.weightId);
            if (!weightDef) return;
            
            const img = this.images.weights[weight.weightId] || this.images.weights[weightDef.id];
            const targetSize = weightDef.targetSize ?? 72;
            const renderScale = targetSize / (img ? Math.max(img.width, img.height) : targetSize);
            const renderedHeight = img ? img.height * renderScale : targetSize * 0.9;
            
            ctx.save();
            
            // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –¥—Ä—É–≥–∏–º –≥—Ä—É–∑–∞–º (–¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
            let nearOtherWeight = false;
            if (weight.isDragging) {
                for (let other of this.state.freeWeights) {
                    if (other === weight) continue;
                    if (this.canStackWeights(other, weight)) {
                        nearOtherWeight = true;
                        break;
                    }
                }
            }
            
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
            if (weight.isDragging) {
                if (nearOtherWeight) {
                    // –ó–µ–ª—ë–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ = –º–æ–∂–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å!
                    ctx.shadowColor = 'rgba(0, 255, 100, 0.9)';
                    ctx.shadowBlur = 30;
                } else {
                    // –°–∏–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ = –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
                    ctx.shadowColor = 'rgba(0, 150, 255, 0.8)';
                    ctx.shadowBlur = 25;
                }
                ctx.shadowOffsetX = 0;
                ctx.shadowOffsetY = 0;
            } else {
                ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
                ctx.shadowBlur = 8;
                ctx.shadowOffsetX = 3;
                ctx.shadowOffsetY = 5;
            }
            
            // –†–∏—Å—É–µ–º –≥—Ä—É–∑ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–¢ –ñ–ï –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –¥–ª—è –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã—Ö)
            if (img) {
                const scale = targetSize / Math.max(img.width, img.height);
                ctx.translate(weight.x, weight.y + renderedHeight / 2);
                ctx.scale(scale, scale);
                ctx.drawImage(img, -img.width / 2, -img.height / 2);
            } else {
                // Fallback: –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                this.drawWeightPlaceholder(ctx, weight.x, weight.y + renderedHeight / 2, targetSize, renderedHeight, 0);
            }
            
            ctx.restore();
            
            // üîç –†–∏—Å—É–µ–º –∫—Ä—é—á–∫–∏ –∏ –∑–æ–Ω—ã –ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è
            if (weight.isDragging) {
                ctx.save();
                ctx.strokeStyle = 'lime';
                ctx.lineWidth = 2;
                ctx.setLineDash([5, 5]);
                
                // –í–µ—Ä—Ö–Ω–∏–π –∫—Ä—é—á–æ–∫ (–Ω–∞–¥ –≥—Ä—É–∑–æ–º)
                const topHookY = weight.y - renderedHeight/2 - 12;
                ctx.beginPath();
                ctx.arc(weight.x, topHookY, 8, 0, Math.PI * 2);
                ctx.stroke();
                
                // –ù–∏–∂–Ω–∏–π –∫—Ä—é—á–æ–∫ (–ø–æ–¥ –≥—Ä—É–∑–æ–º)
                const bottomHookY = weight.y + renderedHeight/2 + 8;
                ctx.beginPath();
                ctx.arc(weight.x, bottomHookY, 8, 0, Math.PI * 2);
                ctx.stroke();
                
                ctx.restore();
            }
            
            // üéØ –†–∏—Å—É–µ–º –∑–æ–Ω—ã –ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –≥—Ä—É–∑–æ–≤
            if (!weight.isDragging) {
                ctx.save();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –≥—Ä—É–∑ —Ä—è–¥–æ–º
                let showSnapZone = false;
                for (let other of this.state.freeWeights) {
                    if (!other.isDragging) continue;
                    if (this.canStackWeights(weight, other)) {
                        showSnapZone = true;
                        break;
                    }
                }
                
                if (showSnapZone) {
                    // –ó–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥ –≤–æ–∫—Ä—É–≥ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä—é—á–∫–∞ = "–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—é–¥–∞"
                    const bottomHookY = weight.y + renderedHeight/2 + 8;
                    ctx.strokeStyle = 'rgba(0, 255, 100, 0.8)';
                    ctx.lineWidth = 3;
                    ctx.setLineDash([]);
                    ctx.beginPath();
                    ctx.arc(weight.x, bottomHookY, 30, 0, Math.PI * 2);
                    ctx.stroke();
                    
                    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
                    ctx.fillStyle = 'rgba(0, 255, 100, 0.15)';
                    ctx.fill();
                }
                
                ctx.restore();
            }
            
            // üîó –†–∏—Å—É–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –≥—Ä—É–∑—ã (—Å—Ç–æ–ø–∫—É)
            if (weight.stackedWeights && weight.stackedWeights.length > 0) {
                let offsetY = renderedHeight;
                
                weight.stackedWeights.forEach(stackedWeight => {
                    const stackedDef = this.getWeightById(stackedWeight.weightId || stackedWeight.id);
                    if (!stackedDef) return;
                    
                    const stackImg = this.images.weights[stackedWeight.weightId] || this.images.weights[stackedDef.id];
                    const stackTargetSize = stackedDef.targetSize ?? 72;
                    const stackScale = stackTargetSize / (stackImg ? Math.max(stackImg.width, stackImg.height) : stackTargetSize);
                    const stackHeight = stackImg ? stackImg.height * stackScale : stackTargetSize * 0.9;
                    
                    ctx.save();
                    ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
                    ctx.shadowBlur = 8;
                    ctx.shadowOffsetX = 3;
                    ctx.shadowOffsetY = 5;
                    
                    if (stackImg) {
                        ctx.translate(weight.x, weight.y + offsetY + stackHeight / 2);
                        ctx.scale(stackScale, stackScale);
                        ctx.drawImage(stackImg, -stackImg.width / 2, -stackImg.height / 2);
                    } else {
                        this.drawWeightPlaceholder(ctx, weight.x, weight.y + offsetY + stackHeight / 2, stackTargetSize, stackHeight, 0);
                    }
                    
                    ctx.restore();
                    
                    offsetY += stackHeight;
                });
            }
        });
    }

    drawSpringPlaceholder(ctx) {
        const canvas = ctx.canvas;
        const width = 240;
        const height = 320;
        const centerX = canvas.width * 0.5;
        const centerY = canvas.height * 0.35;

        ctx.save();
        ctx.strokeStyle = 'rgba(0, 168, 107, 0.45)';
        ctx.fillStyle = 'rgba(0, 168, 107, 0.08)';
        ctx.lineWidth = 2;
    ctx.setLineDash([12, 10]);
    const left = centerX - width / 2;
    const top = centerY - height / 2;
    ctx.fillRect(left, top, width, height);
    ctx.strokeRect(left, top, width, height);

        ctx.setLineDash([]);
        ctx.restore();
        
        // üÜï –†–∏—Å—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã (–¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä—É–∂–∏–Ω—ã)
        this.drawFreeWeights(ctx);
    }

    drawEquipmentLabel(ctx, x, y) {
        ctx.save();
        
        // –ü–æ–¥–ª–æ–∂–∫–∞
        const attachedSpring = this.getAttachedSpring();
        const text = attachedSpring ? attachedSpring.name : '–ü—Ä—É–∂–∏–Ω–∞';
        ctx.font = '14px "Fira Sans", Arial, sans-serif';
        const metrics = ctx.measureText(text);
        const padding = 12;
        const bgWidth = metrics.width + padding * 2;
        const bgHeight = 28;
        
        ctx.fillStyle = 'rgba(15, 20, 41, 0.85)';
        ctx.fillRect(x - bgWidth / 2, y - bgHeight / 2, bgWidth, bgHeight);
        
        ctx.strokeStyle = 'rgba(0, 168, 107, 0.6)';
        ctx.lineWidth = 1.5;
        ctx.strokeRect(x - bgWidth / 2, y - bgHeight / 2, bgWidth, bgHeight);
        
        // –¢–µ–∫—Å—Ç
        ctx.fillStyle = '#E8EAF6';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(text, x, y);
        
        ctx.restore();
    }

    drawRuler(ctx, x, y, physicalHeightPx) {
        const rulerWidth = 50;
        const cmToPx = this.getVisualPixelsPerCm();
        const canvas = ctx.canvas;

        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–Ω—É—Ç—ã–µ –ø—Ä—É–∂–∏–Ω—ã –¥–æ 30 —Å–º, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–∞–Ω–≤–∞—Å–∞
        const maxCmByCanvas = Math.max(5, Math.floor((canvas.height - y - 20) / cmToPx));
        const maxCm = Math.min(30, maxCmByCanvas);
        const rulerHeight = maxCm * cmToPx;
        
        ctx.save();
        
        // –§–æ–Ω –ª–∏–Ω–µ–π–∫–∏
        const rulerBg = ctx.createLinearGradient(x, y, x + rulerWidth, y);
        rulerBg.addColorStop(0, 'rgba(255, 255, 255, 0.12)');
        rulerBg.addColorStop(1, 'rgba(255, 255, 255, 0.08)');
        ctx.fillStyle = rulerBg;
        ctx.fillRect(x, y, rulerWidth, rulerHeight);
        
        // –†–∞–º–∫–∞
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.25)';
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, rulerWidth, rulerHeight);
        
        // –ú–µ—Ç–∫–∏ –∏ —Ü–∏—Ñ—Ä—ã
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';
        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
        ctx.font = '11px "Fira Sans", monospace';
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        ctx.lineWidth = 1.5;
        
    for (let cm = 0; cm <= maxCm; cm++) {
            const markY = y + cm * cmToPx;
            
            // –ì–ª–∞–≤–Ω–∞—è –º–µ—Ç–∫–∞ (1 —Å–º)
            ctx.beginPath();
            ctx.moveTo(x, markY);
            ctx.lineTo(x + 20, markY);
            ctx.stroke();
            
            // –¶–∏—Ñ—Ä–∞
            if (cm % 1 === 0) {
                ctx.fillText(cm.toString(), x + 24, markY);
            }
            
            // –ú–∞–ª—ã–µ –º–µ—Ç–∫–∏ (0.5 —Å–º)
            if (cm < maxCm) {
                const halfMarkY = markY + cmToPx / 2;
                ctx.beginPath();
                ctx.moveTo(x, halfMarkY);
                ctx.lineTo(x + 12, halfMarkY);
                ctx.stroke();
            }
        }
        
        // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        ctx.save();
        ctx.font = 'bold 12px "Fira Sans", Arial, sans-serif';
        ctx.fillStyle = 'rgba(0, 168, 107, 0.9)';
        ctx.textAlign = 'center';
        ctx.fillText('—Å–º', x + rulerWidth / 2, y - 12);
        ctx.restore();
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –¥–ª–∏–Ω—ã –ø—Ä—É–∂–∏–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–Ω–µ–π–∫–∏)
        const visualHeight = physicalHeightPx * this.visual.scale;

        if (visualHeight <= rulerHeight) {
            const indicatorY = y + visualHeight;
            
            // –°—Ç—Ä–µ–ª–∫–∞-—É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É
            ctx.save();
            ctx.fillStyle = 'rgba(255, 179, 0, 0.9)';
            ctx.beginPath();
            ctx.moveTo(x, indicatorY);
            ctx.lineTo(x - 8, indicatorY - 6);
            ctx.lineTo(x - 8, indicatorY + 6);
            ctx.closePath();
            ctx.fill();
            
            // –õ–∏–Ω–∏—è –¥–æ –ø—Ä—É–∂–∏–Ω—ã
            ctx.strokeStyle = 'rgba(255, 179, 0, 0.6)';
            ctx.lineWidth = 2;
            ctx.setLineDash([4, 4]);
            ctx.beginPath();
            ctx.moveTo(x - 8, indicatorY);
            ctx.lineTo(x - 60, indicatorY);
            ctx.stroke();
            ctx.setLineDash([]);
            ctx.restore();
        } else {
            // –ï—Å–ª–∏ –ø—Ä—É–∂–∏–Ω–∞ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–Ω–µ–π–∫–∏, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∏–∑ –ª–∏–Ω–µ–π–∫–∏
            ctx.save();
            ctx.fillStyle = 'rgba(255, 179, 0, 0.8)';
            ctx.fillRect(x - 6, y + rulerHeight - 8, 12, 8);
            ctx.restore();
        }
        
        ctx.restore();
    }

    drawDynamometerSetup(ctx) {
        // –†–∏—Å—É–µ–º –¢–û–õ–¨–ö–û –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä (–±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏) - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä!
        const canvas = ctx.canvas;
        const centerX = this.state.dynamometerPosition.x;
        const centerY = this.state.dynamometerPosition.y;
        
        const dynamometer = this.getEquipmentById(this.state.attachedDynamometerId);
        if (!dynamometer) return;
        
        const maxForce = dynamometer.maxForce; // 1–ù –∏–ª–∏ 5–ù
        const scale = dynamometer.scale; // –¶–µ–Ω–∞ –¥–µ–ª–µ–Ω–∏—è
        
        // –†–∞–∑–º–µ—Ä—ã –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞
        const width = 80;
        const height = 300;
        const scaleHeight = 200;
        
        ctx.save();
        
        // === –ö–û–†–ü–£–° –î–ò–ù–ê–ú–û–ú–ï–¢–†–ê ===
        const gradient = ctx.createLinearGradient(centerX - width/2, centerY, centerX + width/2, centerY);
        gradient.addColorStop(0, 'rgba(220, 220, 220, 0.98)');
        gradient.addColorStop(0.5, 'rgba(240, 240, 240, 0.98)');
        gradient.addColorStop(1, 'rgba(220, 220, 220, 0.98)');
        ctx.fillStyle = gradient;
        ctx.fillRect(centerX - width/2, centerY, width, height);
        
        // –†–∞–º–∫–∞ –∫–æ—Ä–ø—É—Å–∞
        ctx.strokeStyle = 'rgba(80, 80, 80, 0.8)';
        ctx.lineWidth = 3;
        ctx.strokeRect(centerX - width/2, centerY, width, height);
        
        // === –ö–†–Æ–ß–û–ö –°–í–ï–†–•–£ ===
        const topHookY = centerY - 15;
        ctx.strokeStyle = 'rgba(150, 150, 150, 0.9)';
        ctx.lineWidth = 4;
        ctx.lineCap = 'round';
        
        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.lineTo(centerX, topHookY);
        ctx.stroke();
        
        // –ö–æ–ª—å—Ü–æ –∫—Ä—é—á–∫–∞
        ctx.beginPath();
        ctx.arc(centerX, topHookY - 8, 8, 0, Math.PI * 2);
        ctx.stroke();
        
        // === –ù–ê–ó–í–ê–ù–ò–ï –ü–†–ò–ë–û–†–ê ===
        ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
        ctx.font = 'bold 11px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(dynamometer.name, centerX, centerY + 25);
        
        // === –®–ö–ê–õ–ê ===
        const scaleTop = centerY + 50;
        const scaleX = centerX;
        
        ctx.strokeStyle = 'rgba(0, 0, 0, 0.7)';
        ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
        ctx.lineWidth = 1.5;
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —à–∫–∞–ª—ã
        ctx.beginPath();
        ctx.moveTo(scaleX, scaleTop);
        ctx.lineTo(scaleX, scaleTop + scaleHeight);
        ctx.stroke();
        
        // –î–µ–ª–µ–Ω–∏—è —à–∫–∞–ª—ã
        const numDivisions = maxForce / scale; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–µ–Ω–∏–π
        for (let i = 0; i <= numDivisions; i++) {
            const markForce = i * scale;
            const markY = scaleTop + scaleHeight - (markForce / maxForce) * scaleHeight;
            
            // –ì–ª–∞–≤–Ω—ã–µ –¥–µ–ª–µ–Ω–∏—è (–∫–∞–∂–¥–æ–µ)
            ctx.beginPath();
            ctx.moveTo(scaleX - 12, markY);
            ctx.lineTo(scaleX + 12, markY);
            ctx.stroke();
            
            // –¶–∏—Ñ—Ä—ã
            ctx.font = '10px Arial';
            ctx.textAlign = 'right';
            ctx.fillText(markForce.toFixed(1), scaleX - 16, markY + 3);
        }
        
        // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
        ctx.font = 'bold 10px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–ù', scaleX + 30, scaleTop - 5);
        
        // === –£–ö–ê–ó–ê–¢–ï–õ–¨ (–°–¢–†–ï–õ–ö–ê) ===
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∏–ª—É –æ—Ç –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        const totalMass = this.state.attachedWeights.reduce((sum, w) => {
            const weightDef = this.getWeightById(w.id);
            return sum + (weightDef?.mass || 0);
        }, 0);
        const force = (totalMass / 1000) * this.physics.gravity;
        
        const indicatorY = scaleTop + scaleHeight - (Math.min(force, maxForce) / maxForce) * scaleHeight;
        
        // –ö—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞
        ctx.fillStyle = 'rgba(255, 0, 0, 0.9)';
        ctx.beginPath();
        ctx.moveTo(scaleX + 15, indicatorY);
        ctx.lineTo(scaleX + 25, indicatorY - 5);
        ctx.lineTo(scaleX + 25, indicatorY + 5);
        ctx.closePath();
        ctx.fill();
        
        // –õ–∏–Ω–∏—è –æ—Ç —à–∫–∞–ª—ã –¥–æ —Å—Ç—Ä–µ–ª–∫–∏
        ctx.strokeStyle = 'rgba(255, 0, 0, 0.7)';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(scaleX + 12, indicatorY);
        ctx.lineTo(scaleX + 25, indicatorY);
        ctx.stroke();
        
        // === –¶–ò–§–†–û–í–û–ï –¢–ê–ë–õ–û ===
        ctx.fillStyle = 'rgba(255, 0, 0, 1)';
        ctx.font = 'bold 20px "Courier New", monospace';
        ctx.textAlign = 'center';
        const displayText = force > maxForce ? `>${maxForce.toFixed(1)}` : force.toFixed(2);
        ctx.fillText(`${displayText} –ù`, centerX, centerY + height - 20);
        
        // === –ù–ò–ñ–ù–ò–ô –ö–†–Æ–ß–û–ö –î–õ–Ø –ì–†–£–ó–û–í ===
        const bottomHookY = centerY + height;
        
        ctx.strokeStyle = 'rgba(150, 150, 150, 0.9)';
        ctx.lineWidth = 4;
        ctx.lineCap = 'round';
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
        ctx.beginPath();
        ctx.moveTo(centerX, bottomHookY);
        ctx.lineTo(centerX, bottomHookY + 15);
        ctx.stroke();
        
        // –ö–æ–ª—å—Ü–æ –¥–ª—è –ø–æ–¥–≤–µ—à–∏–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞
        ctx.beginPath();
        ctx.arc(centerX, bottomHookY + 23, 8, 0, Math.PI * 2);
        ctx.stroke();
        
        ctx.restore();
        
        // === –ü–û–î–í–ï–®–ï–ù–ù–´–ï –ì–†–£–ó–´ ===
        const hookX = centerX;
        const gruzHookY = bottomHookY + 31; // –ü–æ–¥ –∫–æ–ª—å—Ü–æ–º –∫—Ä—é—á–∫–∞
        this.drawAttachedWeights(ctx, hookX, gruzHookY);
        
        // üÜï –†–∏—Å—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã
        this.drawFreeWeights(ctx);
        
        // üéØ –ó–æ–Ω–∞ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è: –µ—Å–ª–∏ —Ç–∞—â–∏–º –≥—Ä—É–∑, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å
        const draggedWeight = this.state.freeWeights?.find(w => w.isDragging);
        if (draggedWeight) {
            ctx.save();
            ctx.strokeStyle = 'rgba(0, 255, 100, 0.8)';
            ctx.lineWidth = 3;
            ctx.setLineDash([8, 4]);
            
            // –ó–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥ –≤–æ–∫—Ä—É–≥ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä—é—á–∫–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä–∞
            const dynBottomHookX = centerX;
            const dynBottomHookY = bottomHookY + 23;
            ctx.beginPath();
            ctx.arc(dynBottomHookX, dynBottomHookY, 60, 0, Math.PI * 2);
            ctx.stroke();
            
            // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
            ctx.fillStyle = 'rgba(0, 255, 100, 0.1)';
            ctx.fill();
            
            ctx.restore();
        }
    }

    drawSpringCoils(ctx, anchor, length, coils, springRadius, wireRadius) {
        const coilHeight = length / coils;
        
        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ç–µ–Ω—å
        ctx.save();
        ctx.globalAlpha = 0.15;
        ctx.fillStyle = '#0a0e18';
        ctx.filter = 'blur(8px)';
        for (let i = 0; i < coils; i++) {
            const y = anchor.y + i * coilHeight + coilHeight / 2;
            ctx.beginPath();
            ctx.ellipse(anchor.x + 2, y + 3, springRadius + 1, wireRadius + 0.5, 0, 0, Math.PI * 2);
            ctx.fill();
        }
        ctx.filter = 'none';
        ctx.restore();

        // –í–∏—Ç–∫–∏ –ø—Ä—É–∂–∏–Ω—ã
        for (let i = 0; i < coils; i++) {
            const y = anchor.y + i * coilHeight + coilHeight / 2;
            const t = i / (coils - 1);
            
            // –¢–µ–ª–æ –≤–∏—Ç–∫–∞
            ctx.save();
            const coilGrad = ctx.createLinearGradient(
                anchor.x - springRadius, y,
                anchor.x + springRadius, y
            );
            coilGrad.addColorStop(0, '#b8c2d0');
            coilGrad.addColorStop(0.2, '#e8ecf2');
            coilGrad.addColorStop(0.5, '#f8f9fb');
            coilGrad.addColorStop(0.8, '#d4dce6');
            coilGrad.addColorStop(1, '#9aa4b2');
            
            ctx.fillStyle = coilGrad;
            ctx.beginPath();
            ctx.ellipse(anchor.x, y, springRadius, wireRadius, 0, 0, Math.PI * 2);
            ctx.fill();
            
            // –û–±–≤–æ–¥–∫–∞
            ctx.strokeStyle = 'rgba(80, 90, 105, 0.3)';
            ctx.lineWidth = 0.5;
            ctx.stroke();
            ctx.restore();
            
            // –ë–ª–∏–∫ –Ω–∞ –≤–∏—Ç–∫–µ
            ctx.save();
            const hlGrad = ctx.createRadialGradient(
                anchor.x - springRadius * 0.3, y - wireRadius * 0.3, 0,
                anchor.x, y, springRadius * 0.6
            );
            hlGrad.addColorStop(0, 'rgba(255, 255, 255, 0.9)');
            hlGrad.addColorStop(0.6, 'rgba(255, 255, 255, 0.3)');
            hlGrad.addColorStop(1, 'rgba(255, 255, 255, 0)');
            ctx.fillStyle = hlGrad;
            ctx.beginPath();
            ctx.ellipse(anchor.x - springRadius * 0.2, y - wireRadius * 0.2, springRadius * 0.5, wireRadius * 0.6, 0, 0, Math.PI * 2);
            ctx.fill();
            ctx.restore();
        }
    }

    drawTopHook(ctx, x, y, wireRadius) {
        const hookRadius = wireRadius * 2;
        
        // –¢–µ–Ω—å
        ctx.save();
        ctx.globalAlpha = 0.2;
        ctx.fillStyle = '#0a0e18';
        ctx.filter = 'blur(4px)';
        ctx.beginPath();
        ctx.arc(x + 1, y + 2, hookRadius, 0, Math.PI * 2);
        ctx.fill();
        ctx.filter = 'none';
        ctx.restore();
        
        // –¢–µ–ª–æ –∫—Ä—é—á–∫–∞
        ctx.save();
        const hookGrad = ctx.createRadialGradient(x - 3, y - 3, 0, x, y, hookRadius * 1.2);
        hookGrad.addColorStop(0, '#ffffff');
        hookGrad.addColorStop(0.4, '#e8ecf2');
        hookGrad.addColorStop(1, '#9aa4b2');
        ctx.fillStyle = hookGrad;
        ctx.beginPath();
        ctx.arc(x, y, hookRadius, 0, Math.PI * 2);
        ctx.fill();
        
        // –û–±–≤–æ–¥–∫–∞
        ctx.strokeStyle = 'rgba(80, 90, 105, 0.4)';
        ctx.lineWidth = 1;
        ctx.stroke();
        ctx.restore();
        
        // –ë–ª–∏–∫
        ctx.save();
        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        ctx.beginPath();
        ctx.arc(x - 3, y - 3, hookRadius * 0.4, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
    }

    drawBottomHook(ctx, x, y, wireRadius) {
        const stemLength = 20;
        const hookWidth = 18;
        const hookHeight = 24;
        
        // –¢–µ–Ω—å
        ctx.save();
        ctx.globalAlpha = 0.18;
        ctx.fillStyle = '#0a0e18';
        ctx.filter = 'blur(6px)';
        ctx.beginPath();
        ctx.moveTo(x + 1, y + 2);
        ctx.lineTo(x + 1, y + stemLength + 2);
        ctx.arc(x + 1, y + stemLength + hookHeight / 2 + 2, hookWidth / 2, -Math.PI / 2, Math.PI / 2);
        ctx.lineTo(x + 1, y + stemLength + 2);
        ctx.fill();
        ctx.filter = 'none';
        ctx.restore();
        
        // –°—Ç–µ—Ä–∂–µ–Ω—å
        ctx.save();
        const stemGrad = ctx.createLinearGradient(x - wireRadius, y, x + wireRadius, y);
        stemGrad.addColorStop(0, '#9aa4b2');
        stemGrad.addColorStop(0.5, '#e8ecf2');
        stemGrad.addColorStop(1, '#b8c2d0');
        ctx.fillStyle = stemGrad;
        ctx.fillRect(x - wireRadius, y, wireRadius * 2, stemLength);
        ctx.strokeStyle = 'rgba(80, 90, 105, 0.3)';
        ctx.lineWidth = 0.5;
        ctx.strokeRect(x - wireRadius, y, wireRadius * 2, stemLength);
        ctx.restore();
        
        // –ö—Ä—é—á–æ–∫ (U-–æ–±—Ä–∞–∑–Ω—ã–π)
        ctx.save();
        ctx.lineWidth = wireRadius * 2;
        ctx.lineCap = 'round';
        const hookGrad = ctx.createLinearGradient(
            x - hookWidth / 2, y + stemLength,
            x + hookWidth / 2, y + stemLength + hookHeight
        );
        hookGrad.addColorStop(0, '#b8c2d0');
        hookGrad.addColorStop(0.3, '#e8ecf2');
        hookGrad.addColorStop(0.7, '#d4dce6');
        hookGrad.addColorStop(1, '#9aa4b2');
        ctx.strokeStyle = hookGrad;
        
        ctx.beginPath();
        ctx.arc(x, y + stemLength + hookHeight / 2, hookWidth / 2, -Math.PI / 2, Math.PI / 2);
        ctx.stroke();
        
        // –û–±–≤–æ–¥–∫–∞ –∫—Ä—é—á–∫–∞
        ctx.strokeStyle = 'rgba(80, 90, 105, 0.4)';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.arc(x, y + stemLength + hookHeight / 2, hookWidth / 2, -Math.PI / 2, Math.PI / 2);
        ctx.stroke();
        ctx.restore();
        
        // –ë–ª–∏–∫ –Ω–∞ –∫—Ä—é—á–∫–µ
        ctx.save();
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';
        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        ctx.beginPath();
        ctx.arc(x - 1, y + stemLength + hookHeight / 2 - 1, hookWidth / 2 - 2, Math.PI * 0.7, Math.PI * 1.3);
        ctx.stroke();
        ctx.restore();
    }

    drawAttachedWeights(ctx, hookX, hookY) {
        if (!this.state.weightAttached || !this.state.attachedWeights?.length) {
            return;
        }

        let currentY = hookY;
        const now = performance.now() / 1000;
        const baseTension = Math.min(1, 0.4 + (this.state.springElongation || 0) / 220);

        this.state.attachedWeights.forEach((item, index) => {
            const def = this.getWeightById(item.id);
            if (!def) {
                return;
            }

            const img = this.images.weights[item.id] || this.images.weights[def.id];
            const targetSize = def.targetSize ?? 72;
            const hookGap = def.hookGap ?? 22;
            const renderScale = targetSize / (img ? Math.max(img.width, img.height) : targetSize);
            const renderedHeight = img ? img.height * renderScale : targetSize * 0.9;
            
            // –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
            const rotationAmplitude = this.state.isAnimating ? 0.12 : 0.02;
            const rotation = Math.sin(now * 1.5 + index * 0.4) * rotationAmplitude;

            // –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä—é—á–æ–∫ (–Ω–∏—Ç—å –º–µ–∂–¥—É –≥—Ä—É–∑–æ–º –∏ –ø—Ä—É–∂–∏–Ω–æ–π)
            ctx.save();
            ctx.strokeStyle = 'rgba(180, 180, 180, 0.7)';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(hookX, currentY);
            ctx.lineTo(hookX, currentY + hookGap);
            ctx.stroke();
            ctx.restore();

            const centerY = currentY + hookGap + renderedHeight / 2;

            if (img) {
                // –†–∏—Å—É–µ–º –≥—Ä—É–∑ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä
                ctx.save();
                ctx.translate(hookX, centerY);
                ctx.rotate(rotation);
                
                const scale = targetSize / Math.max(img.width, img.height);
                ctx.scale(scale, scale);
                
                // –¢–µ–Ω—å –≥—Ä—É–∑–∞
                ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
                ctx.shadowBlur = 8;
                ctx.shadowOffsetX = 3;
                ctx.shadowOffsetY = 5;
                
                ctx.drawImage(img, -img.width / 2, -img.height / 2);
                ctx.restore();
            } else {
                this.drawWeightPlaceholder(ctx, hookX, centerY, targetSize, renderedHeight, rotation);
            }

            currentY = centerY + renderedHeight / 2;
        });
    }

    drawWeightPlaceholder(ctx, x, y, width, height, rotation) {
        ctx.save();
        ctx.translate(x, y);
        ctx.rotate(rotation);

        const w = width * 0.6;
        const h = height * 0.7;

        const gradient = ctx.createLinearGradient(-w / 2, -h / 2, w / 2, h / 2);
        gradient.addColorStop(0, '#8d99ae');
        gradient.addColorStop(0.5, '#edf2f4');
        gradient.addColorStop(1, '#8d99ae');

        ctx.fillStyle = gradient;
        ctx.strokeStyle = '#2b2d42';
        ctx.lineWidth = 2;
        ctx.fillRect(-w / 2, -h / 2, w, h);
        ctx.strokeRect(-w / 2, -h / 2, w, h);

        ctx.restore();
    }

    // ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã =====
    setupEquipmentDragListeners() {
        const dynamicCanvas = document.getElementById('canvas-dynamic');
        const interactionSurface = document.getElementById('drag-drop-overlay') || dynamicCanvas;

        if (!dynamicCanvas || !interactionSurface) {
            console.error('Interactive surface for spring drag not found');
            return;
        }
        
        const equipmentContainer = this.ui?.equipmentContainer;
        
        let isDragging = false;
        let dragOffset = { x: 0, y: 0 };
        let draggedFreeWeight = null; // üÜï –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä—É–∑
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä—É–∂–∏–Ω—É (–ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä—É–∂–∏–Ω—ã)
        const getAnchor = () => ({
            x: this.state.springPosition?.x ?? dynamicCanvas.width * 0.5,
            y: this.state.springPosition?.y ?? dynamicCanvas.height * 0.15
        });

        const isClickOnSpring = (mouseX, mouseY) => {
            if (!this.state.springAttached) return false;
            const anchor = getAnchor();
            const length = this.getVisualLength();
            const springRadius = 30;

            return (
                mouseX >= anchor.x - springRadius &&
                mouseX <= anchor.x + springRadius &&
                mouseY >= anchor.y - 20 &&
                mouseY <= anchor.y + length + 40
            );
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä
        const isClickOnDynamometer = (mouseX, mouseY) => {
            if (!this.state.dynamometerAttached) return false;
            const pos = this.state.dynamometerPosition;
            const width = 80;
            const height = 300;

            return (
                mouseX >= pos.x - width / 2 &&
                mouseX <= pos.x + width / 2 &&
                mouseY >= pos.y - height / 2 &&
                mouseY <= pos.y + height / 2
            );
        };
        
        const handlePointerMove = (e) => {
            if (!isDragging) return;

            const rect = interactionSurface.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            this.lastPointer = { x: e.clientX, y: e.clientY };

            // üÜï –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä—É–∑
            if (isDragging === 'freeweight' && draggedFreeWeight) {
                draggedFreeWeight.x = x - dragOffset.x;
                draggedFreeWeight.y = y - dragOffset.y;
                this.drawDynamic();
                return;
            }

            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä
            if (this.state.dynamometerAttached && isDragging === 'dynamometer') {
                const newX = x - dragOffset.x;
                const newY = y - dragOffset.y;
                this.state.dynamometerPosition = { x: newX, y: newY };
                this.drawDynamic();
                return;
            }

            // –ü—Ä—É–∂–∏–Ω–∞
            const newAnchorX = x - dragOffset.x;
            const newAnchorY = y - dragOffset.y;

            this.state.springPosition = { x: newAnchorX, y: newAnchorY };
            this.clampSpringPosition();

            this.updateVisualScale(this.state.springLength || this.state.springNaturalLength);

            const anchor = this.getSpringAnchor();
            this.springOffset = {
                x: anchor.x - dynamicCanvas.width * 0.5,
                y: anchor.y - dynamicCanvas.height * 0.15
            };

            this.drawDynamic();
        };

        const handlePointerUp = (e) => {
            if (!isDragging) return;

            const rect = interactionSurface.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            window.removeEventListener('mousemove', handlePointerMove);
            window.removeEventListener('mouseup', handlePointerUp);

            // üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞
            if (isDragging === 'freeweight' && draggedFreeWeight) {
                draggedFreeWeight.isDragging = false;
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –í–ï–†–•–ù–ï–ì–û –ö–†–Æ–ß–ö–ê –≥—Ä—É–∑–∞
                const weightDef = this.getWeightById(draggedFreeWeight.weightId);
                const img = weightDef ? (this.images.weights[draggedFreeWeight.weightId] || this.images.weights[weightDef.id]) : null;
                const targetSize = weightDef?.targetSize ?? 72;
                const renderScale = targetSize / (img ? Math.max(img.width, img.height) : targetSize);
                const renderedHeight = img ? img.height * renderScale : targetSize * 0.9;
                
                // –í–µ—Ä—Ö–Ω–∏–π –∫—Ä—é—á–æ–∫ –≥—Ä—É–∑–∞ (–Ω–∞–¥ –≥—Ä—É–∑–æ–º)
                const weightTopHookX = draggedFreeWeight.x;
                const weightTopHookY = draggedFreeWeight.y - renderedHeight/2 - 12;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä—É–∂–∏–Ω—É
                if (this.state.springAttached) {
                    const anchor = getAnchor();
                    const springLength = this.state.springLength || this.state.springNaturalLength;
                    const springBottomHookX = anchor.x;
                    const springBottomHookY = anchor.y + springLength;
                    const distance = Math.hypot(weightTopHookX - springBottomHookX, weightTopHookY - springBottomHookY);
                    
                    console.log('[FREE-WEIGHTS] Check spring attach:', {
                        weightHook: [weightTopHookX.toFixed(1), weightTopHookY.toFixed(1)],
                        springHook: [springBottomHookX.toFixed(1), springBottomHookY.toFixed(1)],
                        distance: distance.toFixed(1),
                        threshold: 60
                    });
                    
                    if (distance < 60) {
                        console.log('[FREE-WEIGHTS] ‚úÖ Attaching to spring');
                        this.attachFreeWeightToSpring(draggedFreeWeight);
                        draggedFreeWeight = null;
                        isDragging = false;
                        interactionSurface.style.cursor = 'default';
                        return;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä
                if (this.state.dynamometerAttached) {
                    const dynPos = this.state.dynamometerPosition;
                    const dynBottomHookX = dynPos.x;
                    // –í—ã—Å–æ—Ç–∞ –∫–æ—Ä–ø—É—Å–∞ (300) + –Ω–∏–∂–Ω–∏–π –∫—Ä—é—á–æ–∫ (23)
                    const dynBottomHookY = dynPos.y + 300 + 23;
                    const distance = Math.hypot(weightTopHookX - dynBottomHookX, weightTopHookY - dynBottomHookY);
                    
                    console.log('[FREE-WEIGHTS] Check dynamometer attach:', {
                        weightHook: [weightTopHookX.toFixed(1), weightTopHookY.toFixed(1)],
                        dynHook: [dynBottomHookX.toFixed(1), dynBottomHookY.toFixed(1)],
                        distance: distance.toFixed(1),
                        threshold: 60
                    });
                    
                    if (distance < 60) {
                        console.log('[FREE-WEIGHTS] ‚úÖ Attaching to dynamometer');
                        this.attachFreeWeightToSpring(draggedFreeWeight);
                        draggedFreeWeight = null;
                        isDragging = false;
                        interactionSurface.style.cursor = 'default';
                        return;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏
                console.log('[FREE-WEIGHTS] Checking stacking with', this.state.freeWeights.length, 'weights');
                for (let otherWeight of this.state.freeWeights) {
                    if (otherWeight === draggedFreeWeight) {
                        console.log('[FREE-WEIGHTS] Skipping self');
                        continue;
                    }
                    console.log('[FREE-WEIGHTS] Testing stack with weight:', otherWeight.id.substring(0, 12));
                    if (this.canStackWeights(otherWeight, draggedFreeWeight)) {
                        console.log('[FREE-WEIGHTS] ‚úÖ STACKING WEIGHTS!');
                        this.stackWeights(otherWeight, draggedFreeWeight);
                        this.showToast(`‚úì –ì—Ä—É–∑—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã! –û–±—â–∞—è –º–∞—Å—Å–∞: ${otherWeight.mass}–≥`);
                        draggedFreeWeight = null;
                        isDragging = false;
                        interactionSurface.style.cursor = 'default';
                        this.drawDynamic();
                        return;
                    }
                }
                console.log('[FREE-WEIGHTS] No stacking possible');
                
                draggedFreeWeight = null;
                isDragging = false;
                interactionSurface.style.cursor = 'default';
                this.drawDynamic();
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
            if (equipmentContainer) {
                const containerRect = equipmentContainer.getBoundingClientRect();
                if (
                    e.clientX >= containerRect.left &&
                    e.clientX <= containerRect.right &&
                    e.clientY >= containerRect.top &&
                    e.clientY <= containerRect.bottom
                ) {
                    if (isDragging === 'dynamometer') {
                        this.detachDynamometerToInventory();
                    } else {
                        this.detachSpringToInventory();
                    }
                    isDragging = false;
                    interactionSurface.style.cursor = 'default';
                    return;
                }
            }

            if (isDragging === 'spring') {
                this.clampSpringPosition();
            }
            this.drawDynamic();

            isDragging = false;
            interactionSurface.style.cursor = 'default';
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã
        const findFreeWeightAt = (x, y) => {
            if (!this.state.freeWeights || this.state.freeWeights.length === 0) return null;
            for (let i = this.state.freeWeights.length - 1; i >= 0; i--) {
                const w = this.state.freeWeights[i];
                const halfWidth = w.width / 2;
                if (x >= w.x - halfWidth && x <= w.x + halfWidth &&
                    y >= w.y && y <= w.y + w.height) {
                    return w;
                }
            }
            return null;
        };

        interactionSurface.addEventListener('mousedown', (e) => {
            const rect = interactionSurface.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            // üÜï –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã (–æ–Ω–∏ —Å–≤–µ—Ä—Ö—É)
            const freeWeight = findFreeWeightAt(x, y);
            if (freeWeight) {
                isDragging = 'freeweight';
                draggedFreeWeight = freeWeight; // üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                dragOffset.x = x - freeWeight.x;
                dragOffset.y = y - freeWeight.y;
                freeWeight.isDragging = true;
                interactionSurface.style.cursor = 'grabbing';
                window.addEventListener('mousemove', handlePointerMove);
                window.addEventListener('mouseup', handlePointerUp);
                console.log('[FREE-WEIGHTS] Started dragging:', freeWeight.id);
                return;
            }
            
            // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–æ–º–µ—Ç—Ä
            if (isClickOnDynamometer(x, y)) {
                isDragging = 'dynamometer';
                const pos = this.state.dynamometerPosition;
                dragOffset.x = x - pos.x;
                dragOffset.y = y - pos.y;
                interactionSurface.style.cursor = 'grabbing';
                window.addEventListener('mousemove', handlePointerMove);
                window.addEventListener('mouseup', handlePointerUp);
                return;
            }

            // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ó–∞—Ç–µ–º –ø—Ä—É–∂–∏–Ω—É
            if (isClickOnSpring(x, y)) {
                isDragging = 'spring';
                const anchor = getAnchor();
                dragOffset.x = x - anchor.x;
                dragOffset.y = y - anchor.y;
                interactionSurface.style.cursor = 'grabbing';
                window.addEventListener('mousemove', handlePointerMove);
                window.addEventListener('mouseup', handlePointerUp);
            }
        });
        
        interactionSurface.addEventListener('mousemove', (e) => {
            if (isDragging) return;
            const rect = interactionSurface.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–∑—ã –ø–µ—Ä–≤—ã–º–∏
            const onFreeWeight = findFreeWeightAt(x, y);
            if (onFreeWeight) {
                interactionSurface.style.cursor = 'grab';
                return;
            }
            
            const onDynamometer = isClickOnDynamometer(x, y);
            const onSpring = isClickOnSpring(x, y);
            
            interactionSurface.style.cursor = (onDynamometer || onSpring) ? 'grab' : 'default';
        });
        
        console.log('‚úÖ Spring drag enabled');
    }
    
    setupFreeWeightsDrag() {
        // üÜï –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ setupEquipmentDragListeners()
        // –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –Ω–∞ canvas-ui
        console.log('‚úÖ Free weights drag enabled (integrated with equipment drag)');
    }
    
    attachFreeWeightToSpring(freeWeight) {
        console.log('[ATTACH-FREE] üéØ –ü–æ–¥–≤–µ—à–∏–≤–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞:', {
            freeWeightId: freeWeight.id,
            weightId: freeWeight.weightId,
            mass: freeWeight.mass,
            hasStack: freeWeight.stackedWeights?.length > 0,
            stackSize: freeWeight.stackedWeights?.length || 0,
            currentFreeWeights: this.state.freeWeights.length
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        const index = this.state.freeWeights.indexOf(freeWeight);
        if (index !== -1) {
            this.state.freeWeights.splice(index, 1);
            console.log('[ATTACH-FREE] ‚úÖ –£–¥–∞–ª—ë–Ω –∏–∑ freeWeights, –æ—Å—Ç–∞–ª–æ—Å—å:', this.state.freeWeights.length);
        } else {
            console.warn('[ATTACH-FREE] ‚ö†Ô∏è –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ freeWeights!');
        }
        
        console.log('[ATTACH-FREE] üìä State –ø–µ—Ä–µ–¥ –ø–æ–¥–≤–µ—à–∏–≤–∞–Ω–∏–µ–º:', {
            usedWeightIds: Array.from(this.state.usedWeightIds),
            selectedWeights: Array.from(this.state.selectedWeights)
        });
        
        // –ü–æ–¥–≤–µ—à–∏–≤–∞–µ–º –í–ï–†–•–ù–ò–ô –≥—Ä—É–∑
        const weight = this.getWeightById(freeWeight.weightId);
        if (!weight) {
            console.error('[ATTACH-FREE] ‚ùå –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:', freeWeight.weightId);
            return;
        }
        
        console.log('[ATTACH-FREE] –í—ã–∑–æ–≤ attachWeight –¥–ª—è:', weight.id);
        this.attachWeight(weight);
        
        // üÜï –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ø–∫–∞ - –ø–æ–¥–≤–µ—à–∏–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–∑—ã –∏–∑ –Ω–µ—ë
        if (freeWeight.stackedWeights && freeWeight.stackedWeights.length > 0) {
            console.log('[ATTACH-FREE] –ü–æ–¥–≤–µ—à–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ø–∫–∏ –∏–∑', freeWeight.stackedWeights.length, '–≥—Ä—É–∑–æ–≤');
            
            freeWeight.stackedWeights.forEach(stackedWeight => {
                const stackedDef = this.getWeightById(stackedWeight.weightId);
                if (stackedDef) {
                    console.log('[ATTACH-FREE] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Å—Ç–æ–ø–∫–∏:', stackedDef.id);
                    this.addWeightToChain(stackedDef.id); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                } else {
                    console.warn('[ATTACH-FREE] ‚ö†Ô∏è –ì—Ä—É–∑ –∏–∑ —Å—Ç–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', stackedWeight.weightId);
                }
            });
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—Å—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä—É–∂–∏–Ω—É
            const totalMass = this.state.attachedWeights.reduce((sum, item) => {
                const def = this.getWeightById(item.id);
                return sum + (def?.mass ?? 0);
            }, 0);
            
            console.log('[ATTACH-FREE] –û–±—â–∞—è –º–∞—Å—Å–∞ —Å—Ç–æ–ø–∫–∏:', totalMass, '–≥');
            this.state.currentWeight = totalMass;
            
            const massKg = totalMass / 1000;
            const force = massKg * this.physics.gravity;
            const elongationM = force / this.physics.springConstant;
            const elongationPx = elongationM * 100 * this.physics.pixelsPerCm;
            const targetLength = this.state.springNaturalLength + elongationPx;
            
            this.updateVisualScale(targetLength);
            this.drawDynamic();
        }
        
        this.showToast(`‚úì –ì—Ä—É–∑ ${freeWeight.mass}–≥ –ø–æ–¥–≤–µ—à–µ–Ω!`);
    }
    
    removeFreeWeight(weightId) {
        // –£–±–∏—Ä–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä—É–∑ —Å canvas –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        console.log('[REMOVE-FREE] –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞:', weightId);
        
        // –ò—â–µ–º –≥—Ä—É–∑ –≤ freeWeights
        const freeWeightIndex = this.state.freeWeights.findIndex(fw => fw.weightId === weightId);
        
        if (freeWeightIndex !== -1) {
            const removedWeight = this.state.freeWeights[freeWeightIndex];
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö
            this.state.freeWeights.splice(freeWeightIndex, 1);
            
            // –ï—Å–ª–∏ –≥—Ä—É–∑ –±—ã–ª –≤ —Å—Ç–æ–ø–∫–µ, —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –≥—Ä—É–∑—ã
            if (removedWeight.stackedWeights && removedWeight.stackedWeights.length > 0) {
                removedWeight.stackedWeights.forEach(sw => {
                    this.state.usedWeightIds.delete(sw.weightId);
                    console.log('[REMOVE-FREE] –í–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–∞ –∏–∑ —Å—Ç–æ–ø–∫–∏:', sw.weightId);
                });
            }
            
            console.log('[REMOVE-FREE] –ì—Ä—É–∑ —É–¥–∞–ª—ë–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö:', this.state.freeWeights.length);
        }
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ usedWeightIds
        this.state.usedWeightIds.delete(weightId);
        this.state.selectedWeights.delete(weightId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.renderWeightsInventory();
        this.drawDynamic();
        this.showToast('‚úì –ì—Ä—É–∑ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
    }
    
    canStackWeights(weight1, weight2) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≥—Ä—É–∑—ã
        // weight1 ‚Äî –Ω–∏–∂–Ω–∏–π (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤–∏—Å–µ—Ç—å weight2)
        // weight2 ‚Äî –≤–µ—Ä—Ö–Ω–∏–π (–∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–≤–µ—à–∏–≤–∞–µ–º)
        
        const weightDef1 = this.getWeightById(weight1.weightId);
        const weightDef2 = this.getWeightById(weight2.weightId);
        
        if (!weightDef1 || !weightDef2) return false;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ –≤—ã—Å–æ—Ç—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–∫–∞–∫ –≤ drawFreeWeights)
        const img1 = this.images.weights[weight1.weightId] || this.images.weights[weightDef1.id];
        const img2 = this.images.weights[weight2.weightId] || this.images.weights[weightDef2.id];
        
        const targetSize1 = weightDef1.targetSize ?? 72;
        const targetSize2 = weightDef2.targetSize ?? 72;
        
        const renderScale1 = targetSize1 / (img1 ? Math.max(img1.width, img1.height) : targetSize1);
        const renderScale2 = targetSize2 / (img2 ? Math.max(img2.width, img2.height) : targetSize2);
        
        const renderedHeight1 = img1 ? img1.height * renderScale1 : targetSize1 * 0.9;
        const renderedHeight2 = img2 ? img2.height * renderScale2 : targetSize2 * 0.9;
        
        // weight.y ‚Äî —ç—Ç–æ –¶–ï–ù–¢–† –≥—Ä—É–∑–∞
        // –ù–∏–∂–Ω–∏–π –∫—Ä—é—á–æ–∫ weight1 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ renderedHeight1/2 + 8px –Ω–∏–∂–µ —Ü–µ–Ω—Ç—Ä–∞
        const hook1Y = weight1.y + renderedHeight1/2 + 8;
        // –í–µ—Ä—Ö–Ω–∏–π –∫—Ä—é—á–æ–∫ weight2 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ renderedHeight2/2 + 12px –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
        const hook2Y = weight2.y - renderedHeight2/2 - 12;
        
        const distanceX = Math.abs(weight1.x - weight2.x);
        const distanceY = Math.abs(hook1Y - hook2Y);
        
        // –°—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ: –∫—Ä—é—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –û–ß–ï–ù–¨ –±–ª–∏–∑–∫–æ
        const canStack = distanceX < 30 && distanceY < 30;
        
        if (weight2.isDragging) {
            console.log('[STACK-CHECK]', {
                w1: weight1.id.substring(0, 12),
                w2: weight2.id.substring(0, 12),
                'w1.y': weight1.y.toFixed(1),
                'w2.y': weight2.y.toFixed(1),
                'h1': renderedHeight1.toFixed(1),
                'h2': renderedHeight2.toFixed(1),
                'hook1Y': hook1Y.toFixed(1),
                'hook2Y': hook2Y.toFixed(1),
                'dX': distanceX.toFixed(1),
                'dY': distanceY.toFixed(1),
                '‚úÖ': canStack ? 'CAN STACK!' : 'too far'
            });
        }
        
        return canStack;
    }
    
    stackWeights(topWeight, bottomWeight) {
        // –°–æ–µ–¥–∏–Ω—è–µ–º –≥—Ä—É–∑—ã –≤ —Å—Ç–æ–ø–∫—É
        if (!topWeight.stackedWeights) {
            topWeight.stackedWeights = [];
        }
        
        // –£–¥–∞–ª—è–µ–º –Ω–∏–∂–Ω–∏–π –≥—Ä—É–∑ –∏–∑ freeWeights
        const index = this.state.freeWeights.indexOf(bottomWeight);
        if (index !== -1) {
            this.state.freeWeights.splice(index, 1);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ç–æ–ø–∫–µ
        topWeight.stackedWeights.push(bottomWeight);
        topWeight.mass += bottomWeight.mass;
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
        if (bottomWeight.stackedWeights) {
            bottomWeight.stackedWeights.forEach(w => {
                topWeight.stackedWeights.push(w);
                topWeight.mass += w.mass;
            });
        }
        
        console.log('[STACK] Weights stacked:', topWeight.mass, '–≥');
        this.drawDynamic();
    }

    attachSpringToClamp() {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        console.log('üîß attachSpringToClamp - disabled for clean slate');
    }

    animate(currentTime) {
        const deltaTime = (currentTime - this.lastTime) / 1000;
        this.lastTime = currentTime;

        // Update particles
        this.particleSystem.update(deltaTime);

        // Compute spring velocity for motion blur
        const currentLength = this.state.springLength || 140; // –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞
        if (this.prevSpringLength !== null && deltaTime > 0) {
            this.springVelocity = (currentLength - this.prevSpringLength) / deltaTime; // px/s
        }
        this.prevSpringLength = currentLength;

        // Render dynamic layers
        this.drawDynamic();
        this.particleSystem.render();

        // Continue loop
        requestAnimationFrame((time) => this.animate(time));
    }
}

class AttachmentManager {
    constructor(experiment) {
        this.experiment = experiment;
        this.queue = [];
        this.processing = false;
    }

    enqueue(job) {
        return new Promise((resolve, reject) => {
            this.queue.push({ ...job, resolve, reject });
            console.log('[QUEUE] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ–¥–≤–µ—à–∏–≤–∞–Ω–∏—è', {
                weightId: job.weightId ?? job.weight?.id,
                pending: this.queue.length,
                processing: this.processing
            });
            this.processQueue();
        });
    }

    clear() {
        this.queue.length = 0;
    }

    isBusy() {
        return this.processing;
    }

    async processQueue() {
        if (this.processing) {
            return;
        }

        const nextJob = this.queue.shift();
        if (!nextJob) {
            return;
        }

        this.processing = true;

        console.log('[QUEUE] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏', {
            weightId: nextJob.weightId ?? nextJob.weight?.id
        });

        try {
            await this.experiment.attachWeight(nextJob.weight);
            nextJob.resolve();
        } catch (error) {
            nextJob.reject(error);
        } finally {
            console.log('[QUEUE] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏');
            this.processing = false;
            this.processQueue();
        }
    }
}

// Initialize experiment when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    // Check if all required libraries are loaded
    if (typeof ParticleSystem === 'undefined') {
        console.error('‚ùå ParticleSystem not loaded! Check particle-effects.js');
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ParticleSystem –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
        const container = document.getElementById('canvas-container') || document.querySelector('.canvas-container');
        if (!container) return;
        const update = (e) => {
            const rect = container.getBoundingClientRect();
            this.pointer.x = e.clientX - rect.left;
            this.pointer.y = e.clientY - rect.top;
        };
        container.addEventListener('mousemove', (e) => { this.pointer.over = true; update(e); });
        container.addEventListener('mouseenter', (e) => { this.pointer.over = true; update(e); });
        container.addEventListener('mouseleave', () => { this.pointer.over = false; });
    }
    
    if (typeof canvasUtils === 'undefined') {
        console.error('‚ùå canvasUtils not loaded! Check canvas-utils.js');
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: canvasUtils –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (typeof springOscillation === 'undefined') {
        console.error('‚ùå Physics engine not loaded! Check physics-engine.js');
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: physics-engine –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (typeof Chart === 'undefined') {
        console.error('‚ùå Chart.js not loaded!');
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: Chart.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (typeof interact === 'undefined') {
        console.error('‚ùå interact.js not loaded!');
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: interact.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // All libraries loaded, initialize experiment
    console.log('‚úÖ All libraries loaded successfully');
    window.experiment = new SpringExperiment();
    console.log('üöÄ Spring Experiment loaded!');
});
