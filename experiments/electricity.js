// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: –°–±–æ—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏
class ElectricityExperiment {
    constructor() {
        this.canvas = document.getElementById('circuitCanvas');
        if (!this.canvas) return;
        
        this.ctx = this.canvas.getContext('2d');
        this.elements = [];
        this.wires = [];
        this.selectedTool = null;
        this.connectingFrom = null;
        
        this.init();
    }

    init() {
        this.setupEvents();
        this.draw();
    }

    setupEvents() {
        // –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        const toolBtns = document.querySelectorAll('.tool-btn');
        toolBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                toolBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.selectedTool = btn.dataset.tool;
            });
        });

        // –û—á–∏—Å—Ç–∫–∞ —Ü–µ–ø–∏
        const clearBtn = document.getElementById('clearCircuit');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearCircuit());
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–∏
        const testBtn = document.getElementById('testCircuit');
        if (testBtn) {
            testBtn.addEventListener('click', () => this.testCircuit());
        }

        // –°–æ–±—ã—Ç–∏—è –∫–∞–Ω–≤–∞—Å–∞
        this.canvas.addEventListener('click', (e) => this.handleClick(e));
        this.canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.handleClick(e.touches[0]);
        });
    }

    handleClick(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        if (!this.selectedTool) {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã!');
            return;
        }

        if (this.selectedTool === 'wire') {
            this.handleWireConnection(x, y);
        } else {
            this.addElement(x, y);
        }

        this.draw();
    }

    addElement(x, y) {
        const element = {
            type: this.selectedTool,
            x: x - 40,
            y: y - 40,
            width: 80,
            height: 80,
            id: Date.now(),
            connections: [],
            state: false // –¥–ª—è –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è –∏ –ª–∞–º–ø–æ—á–∫–∏
        };

        // –û—Å–æ–±—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        switch(this.selectedTool) {
            case 'battery':
                element.voltage = 4.5; // –í–æ–ª—å—Ç
                break;
            case 'resistor':
                element.resistance = 100; // –û–º
                break;
            case 'ammeter':
                element.current = 0;
                break;
            case 'voltmeter':
                element.voltage = 0;
                break;
        }

        this.elements.push(element);
    }

    handleWireConnection(x, y) {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        const element = this.findElementAt(x, y);
        
        if (!element) {
            alert('–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–æ–≤–æ–¥–æ–º!');
            return;
        }

        if (!this.connectingFrom) {
            this.connectingFrom = element;
            alert('–¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        } else {
            if (this.connectingFrom.id !== element.id) {
                this.wires.push({
                    from: this.connectingFrom.id,
                    to: element.id
                });
                this.connectingFrom.connections.push(element.id);
                element.connections.push(this.connectingFrom.id);
            }
            this.connectingFrom = null;
        }
    }

    findElementAt(x, y) {
        return this.elements.find(el => 
            x >= el.x && x <= el.x + el.width &&
            y >= el.y && y <= el.y + el.height
        );
    }

    draw() {
        const ctx = this.ctx;
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        // –§–æ–Ω
        ctx.fillStyle = '#f0f4f8';
        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctx.fillStyle = '#667eea';
        ctx.font = 'bold 24px Arial';
        ctx.fillText('–°–æ–±–µ—Ä–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–ø—å', 50, 50);

        // –°–µ—Ç–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        ctx.strokeStyle = '#e0e0e0';
        ctx.lineWidth = 1;
        for (let i = 0; i < this.canvas.width; i += 50) {
            ctx.beginPath();
            ctx.moveTo(i, 0);
            ctx.lineTo(i, this.canvas.height);
            ctx.stroke();
        }
        for (let i = 0; i < this.canvas.height; i += 50) {
            ctx.beginPath();
            ctx.moveTo(0, i);
            ctx.lineTo(this.canvas.width, i);
            ctx.stroke();
        }

        // –†–∏—Å—É–µ–º –ø—Ä–æ–≤–æ–¥–∞
        this.wires.forEach(wire => this.drawWire(wire));

        // –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements.forEach(el => this.drawElement(el));

        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        ctx.fillStyle = '#666';
        ctx.font = '16px Arial';
        ctx.fillText('–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ', 50, 100);
    }

    drawWire(wire) {
        const fromEl = this.elements.find(e => e.id === wire.from);
        const toEl = this.elements.find(e => e.id === wire.to);
        
        if (!fromEl || !toEl) return;

        const ctx = this.ctx;
        ctx.strokeStyle = '#FF5722';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(fromEl.x + fromEl.width / 2, fromEl.y + fromEl.height / 2);
        ctx.lineTo(toEl.x + toEl.width / 2, toEl.y + toEl.height / 2);
        ctx.stroke();
    }

    drawElement(el) {
        const ctx = this.ctx;
        
        // –§–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–∞
        ctx.fillStyle = 'white';
        ctx.fillRect(el.x, el.y, el.width, el.height);
        ctx.strokeStyle = '#667eea';
        ctx.lineWidth = 2;
        ctx.strokeRect(el.x, el.y, el.width, el.height);

        ctx.fillStyle = '#333';
        ctx.font = 'bold 14px Arial';
        ctx.textAlign = 'center';

        const centerX = el.x + el.width / 2;
        const centerY = el.y + el.height / 2;

        switch(el.type) {
            case 'battery':
                ctx.fillText('üîã', centerX, centerY - 5);
                ctx.font = '12px Arial';
                ctx.fillText(el.voltage + 'V', centerX, centerY + 15);
                break;
            case 'bulb':
                ctx.fillText('üí°', centerX, centerY + 5);
                break;
            case 'resistor':
                ctx.fillText('‚ö°', centerX, centerY - 5);
                ctx.font = '12px Arial';
                ctx.fillText(el.resistance + 'Œ©', centerX, centerY + 15);
                break;
            case 'switch':
                ctx.fillText('üîò', centerX, centerY + 5);
                break;
            case 'ammeter':
                ctx.fillText('üìä A', centerX, centerY - 5);
                ctx.font = '12px Arial';
                ctx.fillText(el.current.toFixed(2) + 'A', centerX, centerY + 15);
                break;
            case 'voltmeter':
                ctx.fillText('üìà V', centerX, centerY - 5);
                ctx.font = '12px Arial';
                ctx.fillText(el.voltage.toFixed(1) + 'V', centerX, centerY + 15);
                break;
        }

        ctx.textAlign = 'left';
    }

    testCircuit() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞—Ç–∞—Ä–µ–π–∫–∏
        const battery = this.elements.find(e => e.type === 'battery');
        if (!battery) {
            alert('‚ùå –í —Ü–µ–ø–∏ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å —Ü–µ–ø–∏
        if (this.wires.length < this.elements.length - 1) {
            alert('‚ùå –¶–µ–ø—å –Ω–µ –∑–∞–º–∫–Ω—É—Ç–∞! –°–æ–µ–¥–∏–Ω–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–æ–¥–∞–º–∏.');
            return;
        }

        // –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç
        const resistors = this.elements.filter(e => e.type === 'resistor');
        const totalResistance = resistors.reduce((sum, r) => sum + r.resistance, 10); // 10 –û–º - —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ª–∞–º–ø—ã
        const current = battery.voltage / totalResistance;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–æ–≤
        this.elements.forEach(el => {
            if (el.type === 'ammeter') {
                el.current = current;
            }
            if (el.type === 'voltmeter') {
                el.voltage = battery.voltage;
            }
            if (el.type === 'bulb') {
                el.state = current > 0.1; // –õ–∞–º–ø–∞ –≥–æ—Ä–∏—Ç –µ—Å–ª–∏ —Ç–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π
            }
        });

        this.draw();
        alert(`‚úÖ –¶–µ–ø—å —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: ${battery.voltage}V\n–°–∏–ª–∞ —Ç–æ–∫–∞: ${current.toFixed(3)}A\n–û–±—â–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${totalResistance}Œ©`);
    }

    clearCircuit() {
        this.elements = [];
        this.wires = [];
        this.connectingFrom = null;
        this.draw();
    }

    reset() {
        this.clearCircuit();
    }
}
